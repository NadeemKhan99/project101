[{"/home/nadeem/Desktop/react_apps/docforyou/src/index.js":"1","/home/nadeem/Desktop/react_apps/docforyou/src/reportWebVitals.js":"2","/home/nadeem/Desktop/react_apps/docforyou/src/App.js":"3","/home/nadeem/Desktop/react_apps/docforyou/src/components/navbar.js":"4","/home/nadeem/Desktop/react_apps/docforyou/src/components/route.js":"5","/home/nadeem/Desktop/react_apps/docforyou/src/components/contact.js":"6","/home/nadeem/Desktop/react_apps/docforyou/src/components/home.js":"7","/home/nadeem/Desktop/react_apps/docforyou/src/components/about.js":"8","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctor.js":"9","/home/nadeem/Desktop/react_apps/docforyou/src/components/lab.js":"10","/home/nadeem/Desktop/react_apps/docforyou/src/components/signin.js":"11","/home/nadeem/Desktop/react_apps/docforyou/src/apis/doc_check.js":"12","/home/nadeem/Desktop/react_apps/docforyou/src/components/signup.js":"13","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/doc_signin.js":"14","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/doc_signup.js":"15","/home/nadeem/Desktop/react_apps/docforyou/src/components/sliders.js":"16","/home/nadeem/Desktop/react_apps/docforyou/src/components/search.js":"17","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/stepper.js":"18","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/signup_form.js":"19","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/education_form.js":"20","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/review.js":"21","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/slots_form.js":"22","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/slots.js":"23","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/day.js":"24","/home/nadeem/Desktop/react_apps/docforyou/src/components/api_requests/login.js":"25","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/show_card.js":"26","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/doc_appointment.js":"27","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/showsearch.js":"28","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/make_appointment.js":"29","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/my_appointments.js":"30","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/login.js":"31","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/stepper.js":"32","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/signup_form.js":"33","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/education_form.js":"34","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/review.js":"35","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospital_page.js":"36","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/show_hospital_data/show_appointments.js":"37","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/add_doctors/search_doctor.js":"38","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/add_doctors/add_doctor_slots.js":"39","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/add_doctors/stepper.js":"40","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/add_doctors/add_doctor_review.js":"41","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/stepper.js":"42","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/doc_basic.js":"43","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/doc_education.js":"44","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/doc_review.js":"45","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/doc_slots.js":"46","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/show_hospital_data/my_doctors.js":"47","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/all_users.js":"48","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/change_doctors/stepper.js":"49","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/change_slots/stepper.js":"50","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/change_slots/add_doctor_slots.js":"51","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/change_slots/add_doctor_review.js":"52","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/show_hospital_data/show_appointments_detail.js":"53","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/sign_in.js":"54","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/stepper.js":"55","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/doc_basic.js":"56","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/doc_education.js":"57","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/doc_review.js":"58","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/doc_slots.js":"59","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/stepper.js":"60","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/doc_basic.js":"61","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/doc_education.js":"62","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/doc_slots.js":"63","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/doc_review.js":"64","/home/nadeem/Desktop/react_apps/docforyou/src/components/search_lab.js":"65","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/search_lab/show_labs.js":"66","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/search_lab/make_lab_appointment.js":"67","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/lab_appointments.js":"68","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/appointments.js":"69","/home/nadeem/Desktop/react_apps/docforyou/src/components/googlemaps/map_api.js":"70","/home/nadeem/Desktop/react_apps/docforyou/src/components/covid_19/select_country.js":"71","/home/nadeem/Desktop/react_apps/docforyou/src/components/covid_19/covid_data_card.js":"72","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/update_account.js":"73","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/update_password.js":"74"},{"size":496,"mtime":1621365149071,"results":"75","hashOfConfig":"76"},{"size":362,"mtime":1610719022034,"results":"77","hashOfConfig":"76"},{"size":188,"mtime":1616311378906,"results":"78","hashOfConfig":"76"},{"size":10923,"mtime":1621444836719,"results":"79","hashOfConfig":"76"},{"size":3275,"mtime":1621493575281,"results":"80","hashOfConfig":"76"},{"size":2988,"mtime":1621443866414,"results":"81","hashOfConfig":"76"},{"size":260,"mtime":1621363501744,"results":"82","hashOfConfig":"76"},{"size":7226,"mtime":1620234330866,"results":"83","hashOfConfig":"76"},{"size":374,"mtime":1619546695505,"results":"84","hashOfConfig":"76"},{"size":406,"mtime":1621252219465,"results":"85","hashOfConfig":"76"},{"size":3427,"mtime":1619423909017,"results":"86","hashOfConfig":"76"},{"size":0,"mtime":1611396316881,"results":"87","hashOfConfig":"76"},{"size":5167,"mtime":1617728444685,"results":"88","hashOfConfig":"76"},{"size":4387,"mtime":1620152891476,"results":"89","hashOfConfig":"76"},{"size":9500,"mtime":1611601954672,"results":"90","hashOfConfig":"76"},{"size":2690,"mtime":1621253149794,"results":"91","hashOfConfig":"76"},{"size":3582,"mtime":1621417797375,"results":"92","hashOfConfig":"76"},{"size":3253,"mtime":1616312065330,"results":"93","hashOfConfig":"76"},{"size":5159,"mtime":1615350790417,"results":"94","hashOfConfig":"76"},{"size":5153,"mtime":1620024730727,"results":"95","hashOfConfig":"76"},{"size":17457,"mtime":1620024690457,"results":"96","hashOfConfig":"76"},{"size":2784,"mtime":1615007827399,"results":"97","hashOfConfig":"76"},{"size":3286,"mtime":1620024763242,"results":"98","hashOfConfig":"76"},{"size":5523,"mtime":1620024555833,"results":"99","hashOfConfig":"76"},{"size":5574,"mtime":1621358522440,"results":"100","hashOfConfig":"76"},{"size":439,"mtime":1619613919736,"results":"101","hashOfConfig":"76"},{"size":4258,"mtime":1620327300222,"results":"102","hashOfConfig":"76"},{"size":16550,"mtime":1620296540933,"results":"103","hashOfConfig":"76"},{"size":12974,"mtime":1621337406677,"results":"104","hashOfConfig":"76"},{"size":6872,"mtime":1621338328798,"results":"105","hashOfConfig":"76"},{"size":3780,"mtime":1619545790214,"results":"106","hashOfConfig":"76"},{"size":2895,"mtime":1619545137070,"results":"107","hashOfConfig":"76"},{"size":4313,"mtime":1619511615612,"results":"108","hashOfConfig":"76"},{"size":10713,"mtime":1620154653289,"results":"109","hashOfConfig":"76"},{"size":2371,"mtime":1620025157439,"results":"110","hashOfConfig":"76"},{"size":433,"mtime":1619546754164,"results":"111","hashOfConfig":"76"},{"size":1035,"mtime":1620388199725,"results":"112","hashOfConfig":"76"},{"size":3178,"mtime":1619866268072,"results":"113","hashOfConfig":"76"},{"size":3520,"mtime":1619899541031,"results":"114","hashOfConfig":"76"},{"size":2311,"mtime":1619863671448,"results":"115","hashOfConfig":"76"},{"size":16948,"mtime":1619863843259,"results":"116","hashOfConfig":"76"},{"size":3376,"mtime":1619867960180,"results":"117","hashOfConfig":"76"},{"size":5308,"mtime":1619868105518,"results":"118","hashOfConfig":"76"},{"size":5432,"mtime":1619898313506,"results":"119","hashOfConfig":"76"},{"size":17509,"mtime":1620154309532,"results":"120","hashOfConfig":"76"},{"size":3154,"mtime":1620024470068,"results":"121","hashOfConfig":"76"},{"size":10344,"mtime":1619948655537,"results":"122","hashOfConfig":"76"},{"size":10122,"mtime":1620213115654,"results":"123","hashOfConfig":"76"},{"size":9271,"mtime":1621495468320,"results":"124","hashOfConfig":"76"},{"size":2275,"mtime":1620213764584,"results":"125","hashOfConfig":"76"},{"size":3438,"mtime":1620213079586,"results":"126","hashOfConfig":"76"},{"size":16888,"mtime":1620213731296,"results":"127","hashOfConfig":"76"},{"size":3463,"mtime":1620388489215,"results":"128","hashOfConfig":"76"},{"size":3387,"mtime":1621253007160,"results":"129","hashOfConfig":"76"},{"size":2971,"mtime":1621267955664,"results":"130","hashOfConfig":"76"},{"size":4347,"mtime":1621247343499,"results":"131","hashOfConfig":"76"},{"size":5628,"mtime":1621253206669,"results":"132","hashOfConfig":"76"},{"size":17668,"mtime":1621254218610,"results":"133","hashOfConfig":"76"},{"size":3320,"mtime":1621246678301,"results":"134","hashOfConfig":"76"},{"size":3282,"mtime":1621495632001,"results":"135","hashOfConfig":"76"},{"size":3731,"mtime":1621270074627,"results":"136","hashOfConfig":"76"},{"size":5631,"mtime":1621268210747,"results":"137","hashOfConfig":"76"},{"size":3569,"mtime":1621268859575,"results":"138","hashOfConfig":"76"},{"size":18649,"mtime":1621271507702,"results":"139","hashOfConfig":"76"},{"size":2241,"mtime":1621334167000,"results":"140","hashOfConfig":"76"},{"size":5954,"mtime":1621418873653,"results":"141","hashOfConfig":"76"},{"size":10675,"mtime":1621336770216,"results":"142","hashOfConfig":"76"},{"size":3975,"mtime":1621444496075,"results":"143","hashOfConfig":"76"},{"size":3793,"mtime":1621358583867,"results":"144","hashOfConfig":"76"},{"size":2009,"mtime":1621364830971,"results":"145","hashOfConfig":"76"},{"size":2432,"mtime":1621418561421,"results":"146","hashOfConfig":"76"},{"size":4612,"mtime":1621418761049,"results":"147","hashOfConfig":"76"},{"size":5031,"mtime":1621493520698,"results":"148","hashOfConfig":"76"},{"size":3926,"mtime":1621495066295,"results":"149","hashOfConfig":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},"1qfgzso",{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"152"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"152"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"152"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"152"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"152"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"152"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"152"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"152"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"152"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"152"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"152"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"152"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"152"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"152"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"152"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"152"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"152"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"152"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"152"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"152"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"152"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"152"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"152"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"152"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"152"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"152"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"152"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"152"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"152"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"152"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"152"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"152"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"152"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"152"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"152"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"152"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"152"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"152"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"152"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"152"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"152"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"152"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"152"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"152"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"152"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"152"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"345","messages":"346","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/nadeem/Desktop/react_apps/docforyou/src/index.js",[],["347","348"],"/home/nadeem/Desktop/react_apps/docforyou/src/reportWebVitals.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/App.js",["349"],"import React from 'react'\nimport RouteConfig from './components/route'\nimport Navbar from './components/navbar'\n\nfunction App() {\n  return (\n    <RouteConfig/>\n  );\n}\n\nexport default App;\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/navbar.js",["350","351","352","353","354","355","356","357","358","359"],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { green, pink } from '@material-ui/core/colors';\nimport { useHistory } from \"react-router-dom\";\nimport { Fragment } from 'react';\n\n\nconst useStyles = makeStyles((theme) => ({\n    large: {\n        width: theme.spacing(4),\n        height: theme.spacing(4),\n        color: '#fff',\n        backgroundColor: green[500],\n    },\n    nested: {\n\n\n    },\n}));\n\n\n\nfunction Navbar() {\n\n\n    const history = useHistory()\n\n    let [check, setcheck] = useState(sessionStorage.getItem('doctor_id') || false)\n    let [user_check, setuser_check] = useState(sessionStorage.getItem('user_id') || false)\n\n    let [no_user, set_no_user] = useState(sessionStorage.getItem('email') || false)\n    let [lab_true, set_lab_true] = useState(sessionStorage.getItem('lab_id') || false)\n\n    let [hospital_true, set_hospital_true] = useState(sessionStorage.getItem('hospital_id') || false)\n\n\n\n    const classes = useStyles()\n\n\n\n\n\n    function logout() {\n\n\n        alert(\"Logout Successfully!\")\n        setcheck(false)\n        setuser_check(false)\n        set_no_user(false)\n        set_hospital_true(false)\n        set_lab_true(false)\n\n        sessionStorage.clear()\n\n        history.push(\"/login\")\n\n\n\n    }\n\n\n\n\n\n    return (\n        <div>\n            <nav className=\"navbar sticky-top navbar-expand-lg navi\">\n                <div className=\"container\">\n                    <a className=\"navbar-brand brandi\" href=\"#\">docForY</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav\">\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link linkii\" to=\"/\">Home</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link linkii\" to=\"/about\">About us</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link linkii\" to=\"/contact\">Contact us</Link>\n                            </li>\n\n                            {/*----------------------------------------------For doctor--------------------------------------------------- */}\n                            {\n\n                                check ?\n                                    <Fragment>\n\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/doctor\">My Patients</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" hidden to=\"/hospital\">Hospitals</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" hidden to=\"/lab\">Labs</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/accounts\">{sessionStorage.getItem(\"name\")}</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/update\">Update Account</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" hidden to=\"/login\">Sign in</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <a className=\"nav-link linkii\" onClick={logout}>Logout</a>\n                                        </li>\n                                    </Fragment>\n                                    :\n                                    <div></div>\n\n                            }\n\n\n                            {/*----------------------------------------------For Hospital--------------------------------------------------- */}\n                            {\n\n                                hospital_true ?\n                                    <Fragment>\n\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" hidden to=\"/doctor\">Doctors</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/hospital\">Hospitals</Link>\n                                        </li>\n\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/search_doctor\">Add Doctors</Link>\n                                        </li>\n\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" hidden to=\"/lab\">Labs</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" hidden to=\"/login\">Sign in</Link>\n                                        </li>\n\n                                        <li className=\"nav-item\">\n                                        <a className=\"nav-link linkii\" >{sessionStorage.getItem(\"hospital_name\")}</a>\n                                        </li>\n\n                                        <li className=\"nav-item\">\n                                            <a className=\"nav-link linkii\" onClick={logout}>Logout</a>\n                                        </li>\n                                    </Fragment>\n                                    :\n                                    <div></div>\n\n                            }\n\n\n\n                            {/*----------------------------------------------For user--------------------------------------------------- */}\n                            {\n                                user_check ?\n                                    <Fragment>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/my_appointments\" >Doctor Appointments</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/my_labs\" >Lab Appointments</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/user_updates\">Update Account</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <a className=\"nav-link linkii\" onClick={logout}>Logout</a>\n                                        </li>\n                                    </Fragment>\n\n                                    :\n                                    <div></div>\n\n                            }\n\n\n                            {/*----------------------------------------------no user--------------------------------------------------- */}\n                            {\n                                no_user === false ?\n                                    <Fragment>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/doctor\">Doctors</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/hospital\">Hospitals</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/lab\">Labs</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/login\">Sign in</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <a className=\"nav-link linkii\" hidden onClick={logout}>Logout</a>\n                                        </li>\n                                    </Fragment>\n\n                                    :\n                                    <div></div>\n\n                            }\n\n                            {/*----------------------------------------------for labs--------------------------------------------------- */}\n                            {\n                                lab_true ?\n                                    <Fragment>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/lab/appointments\">Appointments</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <Link className=\"nav-link linkii\" to=\"/lab/update\">Update Account</Link>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                        <a className=\"nav-link linkii\" >{sessionStorage.getItem(\"name\")}</a>\n                                        </li>\n                                        <li className=\"nav-item\">\n                                            <a className=\"nav-link linkii\" onClick={logout}>Logout</a>\n                                        </li>\n                                    </Fragment>\n\n                                    :\n                                    <div></div>\n\n                            }\n\n\n\n\n\n\n\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n\n        </div>\n    );\n}\n\nexport default Navbar;\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/route.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/contact.js",["360","361"],"import Navbar from './navbar'\nimport React, { Fragment } from 'react'\nimport { useFormik,Field } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../index.css\"\nimport axios from 'axios';\n\nfunction Contact() {\n\n\n\n    const formik = useFormik({\n        initialValues: {\n            name: \"\",\n            email: \"\",\n            address: \"\",\n        },\n        onSubmit: values => {\n           \n            \n\n\n            var headers = {\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            }\n\n\n\n            axios.post(\n                'http://localhost/back_end/contact.php', values, headers\n            ).then(\n                res => {\n                    alert(res.data.id)\n                    \n                }\n            );\n\n        },\n        validationSchema: yup.object({\n            name: yup.string().matches(\"^[a-zA-Z ]{1,}[^0-9]$\", \"Invalid name, only use text\").required(\"This field is required!\"),\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            address: yup.string().required(\"This field is required!\")\n        })\n    })\n\n\n\n\n\n\n\n\n\n\n\n    return(\n        <div>\n            <Navbar/>\n\n        \n    <div className=\"review_form float-center\">\n\n        <h2 className=\"title\">Contact us</h2>\n\n        <div className=\"fcf-form-wrap\">\n            <div id=\"fcf-form\">\n            <form onSubmit={formik.handleSubmit}>\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"name\" className=\"form-label float-left\"><b>Name</b></label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.name} onChange={formik.handleChange} id=\"name\" placeholder=\"Enter name\" />\n                    {formik.errors.name ? <div className=\"error\">{formik.errors.name}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"email\" className=\"form-label float-left\"><b>Email</b></label>\n                    <input type=\"email\" className=\"form-control\" value={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                    {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"address\" className=\"form-label float-left\"><b>Message</b></label>\n                    <textarea className=\"form-control\" value={formik.values.address} onChange={formik.handleChange} id=\"address\" placeholder=\"Enter Message...\"></textarea>\n                    {formik.errors.address ? <div className=\"error\">{formik.errors.address}</div> : \"\"}\n                </div>\n\n\n                <div className=\"mb-6 p-2 register_button\">\n                    <button type=\"submit\" className=\"btn btn-success\">Send</button>\n                </div>\n            </form>\n            </div>\n        </div>\n    </div>\n\n\n        </div>\n    );\n}\n\nexport default Contact;\n\n\n\n\n\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/home.js",["362"],"import React from 'react'\nimport Search from './search'\nimport Navbar from './navbar'\nimport SearchLab from './search_lab'\n\nfunction Home() {\n    return (\n        <div>\n            <Navbar />\n            <Search />\n        </div>\n    );\n}\n\nexport default Home;","/home/nadeem/Desktop/react_apps/docforyou/src/components/about.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/doctor.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/lab.js",["363"],"import React from 'react'\nimport {Redirect} from 'react-router-dom'\nimport Lab_Sign from './labs_module/sign_in'\n\nfunction Lab() {\n    return(\n        <div>   \n            <div>\n            {sessionStorage.getItem('lab_id')===null?\n            <Lab_Sign />\n            :\n            <Redirect to=\"/\"/>\n        \n        }\n            \n        </div>\n            \n        </div>\n    );\n}\n\nexport default Lab;","/home/nadeem/Desktop/react_apps/docforyou/src/components/signin.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/apis/doc_check.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/signup.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/doc_signin.js",["364"],"import React, { useState } from 'react'\nimport { useFormik } from \"formik\";\nimport { Link } from 'react-router-dom'\nimport * as yup from \"yup\";\nimport \"./../../index.css\"\nimport ShowCard from './show_card'\nimport axios from 'axios';\nimport Navbar from './../navbar'\nimport { navbar_select } from './../api_requests/login'\nimport { Fragment } from 'react';\n\n\nfunction DocSign() {\n\n\n\n    let [check, setcheck] = useState(false)\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\"\n        },\n        onSubmit: (values) => {\n            var headers = {\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            }\n\n\n\n\n            axios.post(\n                'http://localhost/back_end/signin.php', values, headers\n            ).then(\n                res => {\n                    if (res.data.signal === 1) {\n                        sessionStorage.setItem(\"email\", res.data.email)\n                        sessionStorage.setItem(\"doctor_id\", res.data.user_id)\n                        sessionStorage.setItem(\"password\", res.data.password)\n                        sessionStorage.setItem(\"name\", res.data.name)\n                        sessionStorage.setItem(\"fees\", res.data.fees)\n                        sessionStorage.setItem(\"city\", res.data.city)\n                        sessionStorage.setItem(\"address\", res.data.address)\n                        sessionStorage.setItem(\"speciality\",res.data.speciality)\n                        sessionStorage.setItem(\"experience\",res.data.experience)\n                        sessionStorage.setItem(\"qualification\",res.data.qualification)\n                        sessionStorage.setItem(\"phone\", res.data.phone)\n                        sessionStorage.setItem(\"clinic\", res.data.clinic)\n                        sessionStorage.setItem(\"start\", res.data.start)\n                        sessionStorage.setItem(\"end\", res.data.end)\n                        sessionStorage.setItem(\"hospital_ids\", res.data.hostipal_ids)\n                        sessionStorage.setItem(\"hospital_names\", res.data.hospital_name)\n                        sessionStorage.setItem(\"counter\", res.data.counter)\n            \n\n                        setcheck(true)\n                        alert(res.data.id)\n\n                    }\n                    else {\n                        alert(res.data.id)\n                    }\n\n                }\n            );\n\n        },\n        validationSchema: yup.object({\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            password: yup.string().required(\"This field is required!\")\n\n        })\n    })\n\n\n    if (check === true) {\n\n        return (\n            <ShowCard />\n        )\n    }\n\n\n\n    return (\n        <Fragment>\n            <Navbar/>\n            <div className=\"doctor_form\">\n                <form onSubmit={formik.handleSubmit}>\n                    <h3 align='center'>Doctors Login</h3>\n\n                    <div className=\"mb-2 p-2\">\n                        <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                        <input type=\"email\" className=\"form-control\" values={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                        {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                    </div>\n\n                    <div className=\"mb-2 p-2\">\n                        <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                        <input type=\"password\" className=\"form-control\" values={formik.values.password} onChange={formik.handleChange} id=\"password\" placeholder=\"Enter password\" />\n                        {formik.errors.password ? <div className=\"error\">{formik.errors.password}</div> : \"\"}\n                    </div>\n\n                    <div className=\"row mb-2 p-2\">\n                        <div className=\"col-lg-6 col-sm-6\">\n                            <button type=\"submit\" className=\"btn btn-success\">Login</button>\n                        </div>\n                        <div className=\"col-lg-6 col-sm-6 pt-2\">\n                            Create Account? <Link to=\"/doctor/doc_register\">Sign up</Link>\n                        </div>\n                    </div>\n\n                </form>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default DocSign;","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/doc_signup.js",["365","366"],"import React, { Fragment } from 'react'\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../../index.css\"\nimport axios from 'axios';\nimport Appp from './appp'\n\nfunction DocSignup() {\n\n    const formik = useFormik({\n        initialValues: {\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            city: \"\",\n            phone: \"\",\n            address: \"\",\n            user: \"doctor\",\n            clinic: \"\",\n            experience: \"\",\n            fees: \"\",\n            speciality: \"\",\n            qualification: \"\",\n            mon_shifts: \"\",\n            mon_shifts_array: []\n        },\n        onSubmit: (values) => {\n            var headers = {\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            }\n\n\n\n            axios.post(\n                'http://localhost/back_end/go.php', values, headers\n            ).then(\n                res => {\n                    console.log(res.data)\n                }\n            );\n\n        },\n        validationSchema: yup.object({\n            name: yup.string().matches(\"^[a-zA-Z ]{1,}[^0-9]$\", \"Invalid name, only use text\").required(\"This field is required!\"),\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            password: yup.string().min(6, \"Must be greater than 5 digits\").max(10, \"Must be less than 11 digits\").required(\"This field is required!\"),\n            city: yup.string().matches(\"^[a-zA-Z]{3,}$\", \"Only use text must be greater than 3 words\").required(\"This field is required!\"),\n            phone: yup.string().matches(\"^[1-9]{1}[0-9]{9}$\", \"Start number with 1-9 and must 10 digit long\").required(\"This field is required!\"),\n            address: yup.string().required(\"This field is required!\"),\n            clinic: yup.string().matches(\"^[a-zA-Z ]{1,}\", \"Only use alphabets and space!\").required(\"This field is required!\"),\n            fees: yup.number().min(0, \"Too short\").max(10000, \"Too long\").required(\"This field is required!\"),\n            experience: yup.number().max(60, \"Too long\").required(\"This field is required!\"),\n            speciality: yup.string().matches(\"^[a-zA-Z, ]*[a-zA-Z]$\", \"Only use space, comma, text\").required(\"This field is required!\"),\n            qualification: yup.string().matches(\"^[a-zA-Z, ]*[a-zA-Z]$\", \"Only use space, comma, text\").required(\"This field is required!\"),\n            shifts: yup.number(\"Must be number!\").min(0, \"Too short\").max(3, \"Too long\").required(\"This field is required!\")\n\n        })\n    })\n\n\n    // const submithandler = (event) =>{\n    //         event.preventDefault();\n    //         console.log(first)\n    //         console.log(second)\n\n\n    //     var headers = {\n    //         \"Content-Type\": \"application/json;charset=UTF-8\",\n    //     }\n\n\n\n    //     axios.post(\n    //         'http://localhost/back_end/connection.php',{id:1,namee:\"nadeem\"}, headers\n    //     ).then(\n    //         res =>{\n    //             console.log(res.data.id)\n    //         }\n    //     );\n\n\n\n    // }\n\n    const onChangeTickets = (e) =>{\n        const tickets = [formik.values.tickets];\n        const numberOfTickets = e.target.value || 0;\n    \n        tickets.splice(0, tickets.length)\n        for (let i = 0; i < numberOfTickets; i++) {\n            tickets.push({ start: '', end: '' });\n        }\n    \n        formik.values.tickets = tickets\n    \n        console.log(formik.values.tickets)\n        formik.values.mon_shifts.onChange(e)\n    }\n\n\n\n    return (\n        <div className=\"doctor_form\">\n            <form onSubmit={formik.handleSubmit}>\n                <h3>Register</h3>\n                <input type=\"text\" className=\"visually-hidden\" value={formik.values.user} onChange={formik.handleChange} id=\"user\" />\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"name\" className=\"form-label\">Name</label>\n                    <input type=\"text\" className=\"form-control\" values={formik.values.name} onChange={formik.handleChange} autoFocus id=\"name\" placeholder=\"Enter name\" />\n                    {formik.errors.name ? <div className=\"error\">{formik.errors.name}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                    <input type=\"email\" className=\"form-control\" values={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                    {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                    <input type=\"password\" className=\"form-control\" values={formik.values.password} onChange={formik.handleChange} id=\"password\" placeholder=\"Enter password\" />\n                    {formik.errors.password ? <div className=\"error\">{formik.errors.password}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"city\" className=\"form-label\">City</label>\n                    <input type=\"text\" className=\"form-control\" values={formik.values.city} onChange={formik.handleChange} id=\"city\" placeholder=\"Enter city name\" />\n                    {formik.errors.city ? <div className=\"error\">{formik.errors.city}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"phone\" className=\"form-label\">Cell #</label>\n                    <input type=\"text\" className=\"form-control\" values={formik.values.phone} onChange={formik.handleChange} id=\"phone\" placeholder=\"+92 xxxxxxxxxx\" />\n                    {formik.errors.phone ? <div className=\"error\">{formik.errors.phone}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"address\" className=\"form-label\">Address</label>\n                    <input type=\"text\" className=\"form-control\" values={formik.values.address} onChange={formik.handleChange} id=\"address\" placeholder=\"Enter Address\" />\n                    {formik.errors.address ? <div className=\"error\">{formik.errors.address}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"clinic\" className=\"form-label\">Clinic Name</label>\n                    <input type=\"text\" className=\"form-control\" values={formik.values.clinic} onChange={formik.handleChange} id=\"clinic\" placeholder=\"Enter clinic name\" />\n                    {formik.errors.clinic ? <div className=\"error\">{formik.errors.clinic}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"experience\" className=\"form-label\">Experience</label>\n                    <input type=\"number\" className=\"form-control\" values={formik.values.experience} onChange={formik.handleChange} id=\"experience\" placeholder=\"Enter experience in Years\" />\n                    {formik.errors.experience ? <div className=\"error\">{formik.errors.experience}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"fees\" className=\"form-label\">Fees</label>\n                    <input type=\"number\" className=\"form-control\" values={formik.values.fees} onChange={formik.handleChange} id=\"fees\" placeholder=\"Enter fees in rupees\" />\n                    {formik.errors.fees ? <div className=\"error\">{formik.errors.fees}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"speciality\" className=\"form-label\">Speciality</label>\n                    <input type=\"text\" className=\"form-control\" values={formik.values.speciality} onChange={formik.handleChange} id=\"speciality\" placeholder=\"gynalogist,orthologist,brain tumor\" />\n                    {formik.errors.speciality ? <div className=\"error\">{formik.errors.speciality}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"qualification\" className=\"form-label\">Qualification</label>\n                    <input type=\"text\" className=\"form-control\" values={formik.values.qualification} onChange={formik.handleChange} id=\"qualification\" placeholder=\"MBBS,MBA,CSS\" />\n                    {formik.errors.qualification ? <div className=\"error\">{formik.errors.qualification}</div> : \"\"}\n                </div>\n\n                <Appp/>\n{/* \n                <div className=\"container\">\n                    <div className=\"row justify-content-md-center\">\n                        <div className=\"col col-lg-4 col-sm-10\">\n                            <h4>Monday</h4>\n                        </div>\n                        <div className=\"col col-lg-8\">\n                            <input type=\"number\" className=\"form-control\" values={formik.values.mon_shifts} onChange={e => onChangeTickets(e)} id=\"mon_shifts\" placeholder=\"Enter # of shifts per data less than 4\" />\n                            {formik.errors.mon_shifts ? <div className=\"error\">{formik.errors.mon_shifts}</div> : \"\"}\n                        </div>\n                    </div>\n                \n\n                </div> */}\n\n                <div className=\"mb-6 p-2 register_button\">\n                    <button type=\"submit\" className=\"btn btn-success\">Register</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default DocSignup;",["367","368"],"/home/nadeem/Desktop/react_apps/docforyou/src/components/sliders.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/search.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/stepper.js",["369","370","371","372"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nimport Navbar from './../navbar'\nimport SignupForm from './signup_form'\nimport EducationForm from './education_form'\nimport Review from './review'\nimport Doctor from './../doctor'\nimport DocSlots from './slots'\nimport { Fragment } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\n\n\nfunction getSteps() {\n    return ['Register Data', 'Education Info', 'Slots', 'Review'];\n}\n\nfunction getStepContent(stepIndex, setStep, setformValues, formValues, setformValuesEducation, formValuesEducation, doctor_slots, set_doctor_slots) {\n    switch (stepIndex) {\n        case 0:\n            return <SignupForm submit={setStep} preValues={formValues} setformValues={setformValues} />;\n        case 1:\n            return <EducationForm submit={setStep} formValuesEducation={formValuesEducation} setformValuesEducation={setformValuesEducation} />;\n        case 2:\n            return <DocSlots submit={setStep} set_values={set_doctor_slots} />;\n        case 3:\n            return <Review submit={setStep} values={[formValues, formValuesEducation]} slots_data={doctor_slots} />;\n\n\n    }\n}\n\nexport default function DoctorSignup() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [doctor_slots, set_doctor_slots] = React.useState([]);\n    const [formValues, setformValues] = React.useState({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        city: \"\",\n        phone: \"\",\n        address: \"\",\n        clinic: \"\",\n        experience: \"\",\n        fees: \"\",\n        speciality: \"\",\n        qualification: \"\"\n    })\n\n    const [formValuesEducation, setformValuesEducation] = React.useState({\n        clinic: \"\",\n        experience: \"\",\n        fees: \"\",\n        speciality: \"\",\n        qualification: \"\"\n    })\n\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n\n    if (activeStep === 4) {\n        return (\n            <Doctor />\n        )\n    }\n\n    return (\n        <Fragment>\n            <Navbar />\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                {\n                    getStepContent(activeStep, setActiveStep, setformValues, formValues, setformValuesEducation, formValuesEducation, doctor_slots, set_doctor_slots)\n                }\n\n\n\n            </div>\n        </Fragment>\n    );\n}\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/signup_form.js",["373","374","375"],"import React, { Fragment } from 'react'\nimport { useFormik,Field } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../../index.css\"\nimport axios from 'axios';\n\nfunction SignupForm({submit,setformValues,preValues}) {\n\n    const formik = useFormik({\n        initialValues: {\n            name: preValues.name,\n            email: preValues.email,\n            password: preValues.password,\n            city: preValues.city,\n            phone: preValues.phone,\n            address: preValues.address,\n        },\n        onSubmit: values => {\n            setformValues({...values})\n            submit(1)\n            \n\n\n            // var headers = {\n            //     \"Content-Type\": \"application/json;charset=UTF-8\",\n            // }\n\n\n\n            // axios.post(\n            //     'http://localhost/back_end/go.php', values, headers\n            // ).then(\n            //     res => {\n            //         console.log(res.data)\n            //     }\n            // );\n\n        },\n        validationSchema: yup.object({\n            name: yup.string().matches(\"^[a-zA-Z ]{1,}[^0-9]$\", \"Invalid name, only use text\").required(\"This field is required!\"),\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            password: yup.string().min(6, \"Must be greater than 5 digits\").max(10, \"Must be less than 11 digits\").required(\"This field is required!\"),\n            city: yup.string().matches(\"^[a-zA-Z]{3,}$\", \"Only use text must be greater than 3 words\").required(\"This field is required!\"),\n            phone: yup.string().matches(\"^[1-9]{1}[0-9]{9}$\", \"Start number with 1-9 and must 10 digit long\").required(\"This field is required!\"),\n            address: yup.string().required(\"This field is required!\")\n        })\n    })\n\n\n    // const submithandler = (event) =>{\n    //         event.preventDefault();\n    //         console.log(first)\n    //         console.log(second)\n\n\n    //     var headers = {\n    //         \"Content-Type\": \"application/json;charset=UTF-8\",\n    //     }\n\n\n\n    //     axios.post(\n    //         'http://localhost/back_end/connection.php',{id:1,namee:\"nadeem\"}, headers\n    //     ).then(\n    //         res =>{\n    //             console.log(res.data.id)\n    //         }\n    //     );\n\n\n\n    // }\n\n   \n\n\n\n    return (\n\n        \n        <div className=\"doctor_form\">\n            <form onSubmit={formik.handleSubmit}>\n                <h3>Register</h3>\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"name\" className=\"form-label\">Name</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.name} onChange={formik.handleChange} id=\"name\" placeholder=\"Enter name\" />\n                    {formik.errors.name ? <div className=\"error\">{formik.errors.name}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                    <input type=\"email\" className=\"form-control\" value={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                    {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                    <input type=\"password\" className=\"form-control\" value={formik.values.password} onChange={formik.handleChange} id=\"password\" placeholder=\"Enter password\" />\n                    {formik.errors.password ? <div className=\"error\">{formik.errors.password}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"city\" className=\"form-label\">City</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.city} onChange={formik.handleChange} id=\"city\" placeholder=\"Enter city name\" />\n                    {formik.errors.city ? <div className=\"error\">{formik.errors.city}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"phone\" className=\"form-label\">Cell #</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.phone} onChange={formik.handleChange} id=\"phone\" placeholder=\"+92 xxxxxxxxxx\" />\n                    {formik.errors.phone ? <div className=\"error\">{formik.errors.phone}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"address\" className=\"form-label\">Address</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.address} onChange={formik.handleChange} id=\"address\" placeholder=\"Enter Address\" />\n                    {formik.errors.address ? <div className=\"error\">{formik.errors.address}</div> : \"\"}\n                </div>\n\n\n                <div className=\"mb-6 p-2 register_button\">\n                    <button type=\"submit\" className=\"btn btn-success\">Next</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default SignupForm;","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/education_form.js",["376","377"],"import React, { Fragment } from 'react'\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../../index.css\"\nimport axios from 'axios';\n\nfunction EducationForm({ submit, setformValuesEducation, formValuesEducation }) {\n\n    const formik = useFormik({\n        initialValues: {\n\n            clinic: formValuesEducation.clinic,\n            experience: formValuesEducation.experience,\n            fees: formValuesEducation.fees,\n            speciality: formValuesEducation.speciality,\n            qualification: formValuesEducation.qualification,\n        }\n        ,\n        onSubmit: (values) => {\n\n            submit(2)\n            setformValuesEducation({ ...values })\n\n\n\n\n            // var headers = {\n            //     \"Content-Type\": \"application/json;charset=UTF-8\",\n            // }\n\n\n\n            // axios.post(\n            //     'http://localhost/back_end/go.php', values, headers\n            // ).then(\n            //     res => {\n            //         console.log(res.data)\n            //     }\n            // );\n\n        },\n        validationSchema: yup.object({\n            clinic: yup.string().matches(\"^[a-zA-Z ]{1,}\", \"Only use alphabets and space!\").required(\"This field is required!\"),\n            fees: yup.number().min(0, \"Too short\").max(10000, \"Too long\").required(\"This field is required!\"),\n            experience: yup.number().max(60, \"Too long\").required(\"This field is required!\"),\n            speciality: yup.string().matches(\"[^none]\", \"This field is required\").required(\"This field is required!\"),\n            qualification: yup.string().matches(\"^[a-zA-Z, ]*[a-zA-Z]$\", \"Only use space, comma, text\").required(\"This field is required!\")\n\n        })\n    })\n\n\n\n\n\n\n\n\n    return (\n        <div className=\"doctor_form\">\n            <form onSubmit={formik.handleSubmit}>\n                <h3 align=\"center\">Education Info</h3>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"clinic\" className=\"form-label\">Clinic Name</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.clinic} onChange={formik.handleChange} id=\"clinic\" placeholder=\"Enter clinic name\" />\n                    {formik.errors.clinic ? <div className=\"error\">{formik.errors.clinic}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"experience\" className=\"form-label\">Experience</label>\n                    <input type=\"number\" className=\"form-control\" value={formik.values.experience} onChange={formik.handleChange} id=\"experience\" placeholder=\"Enter experience in Years\" />\n                    {formik.errors.experience ? <div className=\"error\">{formik.errors.experience}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"fees\" className=\"form-label\">Fees</label>\n                    <input type=\"number\" className=\"form-control\" value={formik.values.fees} onChange={formik.handleChange} id=\"fees\" placeholder=\"Enter fees in rupees\" />\n                    {formik.errors.fees ? <div className=\"error\">{formik.errors.fees}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"speciality\" className=\"form-label\">Speciality</label>\n                    <select className=\"form-select\" id=\"speciality\" value={formik.values.speciality} onChange={formik.handleChange} aria-label=\"Default select example\">\n                        <option value=\"none\">Select Specialist</option>\n                        <option value=\"neurologist\">Neurologist</option>\n                        <option value=\"child specialist\">Child Specialist</option>\n                        <option value=\"gynecologist\">Gynecologist</option>\n                        <option value=\"orthopadic surgeon\">Orthopadic Surgeon</option>\n                        <option value=\"endocrinlogist\">Endocrinlogist</option>\n                    </select>\n                    {formik.errors.speciality ? <div className=\"error\">{formik.errors.speciality}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"qualification\" className=\"form-label\">Qualification</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.qualification} onChange={formik.handleChange} id=\"qualification\" placeholder=\"MBBS\" />\n                    {formik.errors.qualification ? <div className=\"error\">{formik.errors.qualification}</div> : \"\"}\n                </div>\n\n\n                <div className=\"mb-6 p-2 register_button\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n\n                            <button className=\"btn btn-primary\" onClick={() => submit(0)} >Back</button>\n                        </div>\n                        <div className=\"col\">\n                            <button type=\"submit\" className=\"btn btn-success float-right\">Next</button>\n                        </div>\n                    </div>\n\n\n\n                </div>\n            </form>\n\n        </div>\n    );\n}\n\nexport default EducationForm;","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/review.js",["378","379","380","381","382","383","384","385","386","387","388","389","390","391","392"],"import React, { useState } from 'react'\nimport \"./../../index.css\"\nimport axios from 'axios';\n\n\n\nfunction Review({ submit, values, slots_data }) {\n\n\n\n    let monday_slots = slots_data[0]\n    let tuesday_slots = slots_data[1]\n    let wednesday_slots = slots_data[2]\n    let thursday_slots = slots_data[3]\n    let friday_slots = slots_data[4]\n    let saturday_slots = slots_data[5]\n    let sunday_slots = slots_data[6]\n\n    let monday_database = [\"\", \"\"]\n    let tuesday_database = [\"\", \"\"]\n    let wednesday_database = [\"\", \"\"]\n    let thursday_database = [\"\", \"\"]\n    let friday_database = [\"\", \"\"]\n    let saturday_database = [\"\", \"\"]\n    let sunday_database = [\"\", \"\"]\n\n\n    function get_mapped_data(data) {\n        let i = 1;\n        let rows = []\n        while (i <= parseInt(data)) {\n            rows.push(i)\n            i++\n        }\n        return rows\n    }\n\n\n\n\n\n\n    function onSubmit() {\n\n\n\n        let starting = `${monday_database[0]},${tuesday_database[0]},${wednesday_database[0]},${thursday_database[0]},${friday_database[0]},${saturday_database[0]},${sunday_database[0]}`\n        let ending = `${monday_database[1]},${tuesday_database[1]},${wednesday_database[1]},${thursday_database[1]},${friday_database[1]},${saturday_database[1]},${sunday_database[1]}`\n\n        const registration_data = {\n            name: values[0].name,\n            email: values[0].email,\n            password: values[0].password,\n            city: values[0].city,\n            phone: values[0].phone,\n            address: values[0].address,\n            category: \"doctor\",\n            clinic: values[1].clinic,\n            fees: values[1].fees,\n            experience: values[1].experience,\n            qualification: values[1].qualification,\n            speciality: values[1].speciality,\n            start: starting,\n            end: ending\n        }\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n\n\n\n        axios.post(\n            'http://localhost/back_end/signup_doctor.php', registration_data, headers\n        ).then(\n            res => {\n                alert(res.data.id)\n                submit(4)\n\n\n\n            }\n        );\n\n\n    }\n\n\n\n    return (\n        <div className=\"review_form\">\n            <h2>Review</h2>\n            <br></br>\n            <h4>Registration Data</h4>\n            <p>{values[0].name}</p>\n            <p>{values[0].email}</p>\n            <p>{values[0].password}</p>\n            <p>{values[0].city}</p>\n            <p>0{values[0].phone}</p>\n            <p>{values[0].address}</p>\n            <h4>Educational Data</h4>\n            <p>{values[1].clinic}</p>\n            <p>{values[1].fees}</p>\n            <p>{values[1].experience}</p>\n            <p>{values[1].qualification}</p>\n            <p>{values[1].speciality}</p>\n\n\n            {/*  ------------------------------------MONDAY----------------------------- */}\n            <h4>Slots</h4>\n            <b>Monday</b>\n            {\n                monday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(monday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = monday_slots.tickets[key].email.split(\":\")\n                        console.log(start_data)\n                        const end_data = monday_slots.tickets[key].name.split(\":\")\n                        console.log(end_data)\n                        let start_time = \"\"\n                        let end_time = \"\"\n\n\n\n\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : start_time = start_time\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : end_time = end_time\n\n                        monday_database[0] = monday_database[0].concat(end_time + \"-\")\n                        monday_database[1] = monday_database[1].concat(start_time + \"-\")\n\n\n\n\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n\n                    get_mapped_data(1).map((data, key) => {\n                        monday_database[0] = \"Holiday\"\n                        monday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Tuesday----------------------------- */}\n\n            <h5>Tuesday</h5>\n            {\n                tuesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(tuesday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = tuesday_slots.tickets[key].email.split(\":\")\n                        const end_data = tuesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : start_time = start_time\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : end_time = end_time\n\n\n                        tuesday_database[0] = tuesday_database[0].concat(end_time + \"-\")\n                        tuesday_database[1] = tuesday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        tuesday_database[0] = \"Holiday\"\n                        tuesday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Wednesday----------------------------- */}\n\n            <h5>Wednesday</h5>\n            {\n                wednesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(wednesday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = wednesday_slots.tickets[key].email.split(\":\")\n                        const end_data = wednesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : start_time = start_time\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : end_time = end_time\n\n                        wednesday_database[0] = wednesday_database[0].concat(end_time + \"-\")\n                        wednesday_database[1] = wednesday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        wednesday_database[0] = \"Holiday\"\n                        wednesday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n\n\n            {/*  ------------------------------------Thursday----------------------------- */}\n\n            <h5>Thursday</h5>\n            {\n                thursday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(thursday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = thursday_slots.tickets[key].email.split(\":\")\n                        const end_data = thursday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : start_time = start_time\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : end_time = end_time\n\n                        thursday_database[0] = thursday_database[0].concat(end_time + \"-\")\n                        thursday_database[1] = thursday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        thursday_database[0] = \"Holiday\"\n                        thursday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Friday----------------------------- */}\n\n            <h5>Friday</h5>\n            {\n                friday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(friday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = friday_slots.tickets[key].email.split(\":\")\n                        const end_data = friday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : start_time = start_time\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : end_time = end_time\n\n                        friday_database[0] = friday_database[0].concat(end_time + \"-\")\n                        friday_database[1] = friday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        friday_database[0] = \"Holiday\"\n                        friday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Saturday----------------------------- */}\n\n            <h5>Saturday</h5>\n            {\n                saturday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(saturday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = saturday_slots.tickets[key].email.split(\":\")\n                        const end_data = saturday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : start_time = start_time\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : end_time = end_time\n\n                        saturday_database[0] = saturday_database[0].concat(end_time + \"-\")\n                        saturday_database[1] = saturday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        saturday_database[0] = \"Holiday\"\n                        saturday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Sunday----------------------------- */}\n\n            <h5>Sunday</h5>\n            {\n                sunday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(sunday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = sunday_slots.tickets[key].email.split(\":\")\n                        const end_data = sunday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : start_time = start_time\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : end_time = end_time\n\n                        sunday_database[0] = sunday_database[0].concat(end_time + \"-\")\n                        sunday_database[1] = sunday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        sunday_database[0] = \"Holiday\"\n                        sunday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <button className=\"btn btn-primary float-right\" onClick={() => submit(2)}>Back</button>\n                </div>\n                <div className=\"col\">\n                    <button className=\"btn btn-success float-left\" onClick={onSubmit}>Submit</button>\n                </div>\n            </div>\n\n\n\n\n\n\n\n        </div>\n    );\n}\n\nexport default Review;","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/slots_form.js",["393","394","395","396","397","398","399","400","401","402"],"/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/slots.js",["403"],"import React, { Fragment, useState } from 'react'\nimport \"./../../index.css\"\nimport DaySlots from './day'\n\n\nfunction DocSlots({ submit, set_values }) {\n\n    const [mondaySlots, setmondaySlots] = useState([])\n    const [tuesdaySlots, settuesdaySlots] = useState([])\n    const [wednesdaySlots, setwednesdaySlots] = useState([])\n    const [thursdaySlots, setthursdaySlots] = useState([])\n    const [fridaySlots, setfridaySlots] = useState([])\n    const [saturdaySlots, setsaturdaySlots] = useState([])\n    const [sundaySlots, setsundaySlots] = useState([])\n\n\n    const [mondaycheck, setmondaycheck] = useState(false)\n    const [tuesdaycheck, settuesdaycheck] = useState(false)\n    const [wednesdaycheck, setwednesdaycheck] = useState(false)\n    const [thursdaycheck, setthursdaycheck] = useState(false)\n    const [fridaycheck, setfridaycheck] = useState(false)\n    const [saturdaycheck, setsaturdaycheck] = useState(false)\n    const [sundaycheck, setsundaycheck] = useState(false)\n\n\n    function onSubmit() {\n        if (mondaycheck && tuesdaycheck && wednesdaycheck && thursdaycheck && fridaycheck && saturdaycheck && sundaycheck) {\n\n\n            let mon = { \"numberOfTickets\": String(mondaySlots['tickets'].length), \"tickets\": mondaySlots['tickets'] }\n            let tues = { \"numberOfTickets\": String(tuesdaySlots['tickets'].length), \"tickets\": tuesdaySlots['tickets'] }\n            let wed = { \"numberOfTickets\": String(wednesdaySlots['tickets'].length), \"tickets\": wednesdaySlots['tickets'] }\n            let thurs = { \"numberOfTickets\": String(thursdaySlots['tickets'].length), \"tickets\": thursdaySlots['tickets'] }\n            let fri = { \"numberOfTickets\": String(fridaySlots['tickets'].length), \"tickets\": fridaySlots['tickets'] }\n            let satur = { \"numberOfTickets\": String(saturdaySlots['tickets'].length), \"tickets\": saturdaySlots['tickets'] }\n            let sun = { \"numberOfTickets\": String(sundaySlots['tickets'].length), \"tickets\": sundaySlots['tickets'] }\n\n\n\n            set_values([mon, tues, wed, thurs, fri, satur, sun])\n            submit(3)\n        }\n        else {\n            alert(\"Complete your slots!\")\n        }\n    }\n\n\n    return (\n        <div>\n            <h3 className=\"title\">Make Slots</h3>\n            <DaySlots setDay={setmondaySlots} day=\"Monday\" check={setmondaycheck} />\n            <DaySlots setDay={settuesdaySlots} day=\"Tuesday\" check={settuesdaycheck} />\n            <DaySlots setDay={setwednesdaySlots} day=\"Wednesday\" check={setwednesdaycheck} />\n            <DaySlots setDay={setthursdaySlots} day=\"Thursday\" check={setthursdaycheck} />\n            <DaySlots setDay={setfridaySlots} day=\"Friday\" check={setfridaycheck} />\n            <DaySlots setDay={setsaturdaySlots} day=\"Saturday\" check={setsaturdaycheck} />\n            <DaySlots setDay={setsundaySlots} day=\"Sunday\" check={setsundaycheck} />\n\n            <div className=\"row padd\">\n                <div className=\"col\">\n                    <button className=\"btn btn-primary float-right\" onClick={() => submit(1)}>Back</button>\n                </div>\n                <div className=\"col\">\n                    <button className=\"btn btn-success\" onClick={onSubmit}>Next</button>\n                </div>\n            </div>\n\n\n\n\n\n        </div>\n\n\n    )\n\n\n}\n\nexport default DocSlots;","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/day.js",["404","405"],"import React, { useEffect, useState } from 'react';\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nfunction DaySlots({ setDay, day, check }) {\n\n\n    const [data_sent_flag, set_data_sent_flag] = useState(false)\n\n\n    const initialValues = {\n        numberOfTickets: '',\n        tickets: []\n    };\n\n\n\n    function onChangeTickets(e, field, values, setValues) {\n        // update dynamic form\n        const tickets = [...values.tickets];\n        const numberOfTickets = e.target.value;\n        if (e.target.value !== 0) {\n            const previousNumber = parseInt(field.value);\n            if (previousNumber < numberOfTickets) {\n                for (let i = previousNumber; i < numberOfTickets; i++) {\n                    tickets.push({ name: '', email: '' });\n                }\n            } else {\n                for (let i = previousNumber; i >= numberOfTickets; i--) {\n                    tickets.splice(i, 1);\n                }\n            }\n        }\n\n        setValues({ ...values, tickets });\n\n        // call formik onChange method\n        field.onChange(e);\n    }\n\n\n\n    function onSubmit(fields) {\n        // display form field values on success\n        // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4));\n        set_data_sent_flag(true)\n        setDay(fields)\n        check(true)\n\n        \n        \n    }\n\n    return (\n        <div className=\"doctor_form\">\n        <Formik initialValues={initialValues} onSubmit={onSubmit}>\n            {({ errors, values, touched, setValues }) => (\n                <Form>\n                    <div className=\"card m-3\">\n                        <div className=\"card-body border-bottom\">\n                            <div className=\"form-row\">\n                                <div className=\"form-group\">\n                                    <h3>{day}</h3>\n                                    <Field name=\"numberOfTickets\">\n                                        {({ field }) => (\n                                            <select required {...field} className={'form-control' + (errors.numberOfTickets && touched.numberOfTickets ? ' is-invalid' : '')} onChange={e => onChangeTickets(e, field, values, setValues)}>\n\n                                                {[0, 1, 2, 3].map(i =>\n                                                    <option key={i} value={i}>{i}</option>\n                                                )}\n                                            </select>\n                                        )}\n                                    </Field>\n                                    <ErrorMessage name=\"numberOfTickets\" component=\"div\" className=\"invalid-feedback\" />\n                                </div>\n                            </div>\n                        </div>\n                        <FieldArray name=\"tickets\">\n                            {() => (values.tickets.map((ticket, i) => {\n                                // const ticketErrors = errors.tickets?.length && errors.tickets[i] || {};\n                                // const ticketTouched = touched.tickets?.length && touched.tickets[i] || {};\n                                return (\n                                    <div key={i} className=\"list-group list-group-flush\">\n                                        <div className=\"list-group-item\">\n                                            <h5 className=\"card-title\">Shift {i + 1}</h5>\n                                            <div className=\"form-row\">\n                                                <div className=\"form-group col-6\">\n                                                    <label>Start</label>\n                                                    <Field name={`tickets.${i}.name`} type=\"time\" required className='form-control' />\n\n                                                </div>\n                                                <div className=\"form-group col-6\">\n                                                    <label>End</label>\n                                                    <Field name={`tickets.${i}.email`} type=\"time\" required className='form-control' />\n\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                );\n                            }))}\n                        </FieldArray>\n                        <div className=\"card-footer text-center border-top-0\">\n                            {\n                                data_sent_flag ? \n                                <div>\n                                    <span>Submitted</span>\n                                    <input type=\"button\" className=\"btn btn-secondary\" value=\"Change\" onClick={()=> {set_data_sent_flag(false)\n                                        check(false)\n                                    }}/>\n\n                                </div>\n                                :\n\n                                <button type=\"submit\" className=\"btn btn-primary mr-1\">\n                                Submit\n                                </button>\n                            }\n                            \n                            {/* <button className=\"btn btn-secondary mr-1\" type=\"reset\">Reset</button> */}\n                        </div>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n        </div>\n    )\n}\n\nexport default DaySlots;","/home/nadeem/Desktop/react_apps/docforyou/src/components/api_requests/login.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/show_card.js",["406"],"import React, { useState } from 'react'\nimport { Fragment } from 'react';\nimport \"./../../index.css\"\nimport Navbar from './../navbar'\n\n\nfunction ShowCard() {\n\n\n\n\n    return (\n        <Fragment>\n            <Navbar/>\n        <div className=\"show_card\">\n            <h4>Login Successfully!</h4>\n            <br></br>\n            <h6>Now you are able to make changes!</h6>\n        </div>\n        </Fragment>\n    );\n}\n\nexport default ShowCard;","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/doc_appointment.js",["407","408"],"import React, { useState,useEffect } from 'react'\nimport { Fragment } from 'react'\nimport { date } from 'yup/lib/locale'\nimport Navbar from '../navbar'\nimport \"./../../index.css\"\nimport {get_appointments} from './../api_requests/login'\n\n\nfunction Appointments() {\n\n    let id = sessionStorage.getItem('doctor_id')\n    \n\n    let [appointment,setappointment] = useState([])\n\n    let check_appointment = true\n\n    \n    let i = 1;\n    let rows = []\n\n    let j = 1\n    let rows1 = []\n    \n\n    useEffect(() => {\n        async function data_show(id) {\n          let real_data = await get_appointments(id);\n\n          setappointment(real_data);\n        }\n        data_show(id);\n      },[id]);\n    \n      if (!appointment)\n        return (<h1>Loading...</h1>)\n    else\n    {\n        if(appointment['counter']>0 || appointment['counter1'] > 0)\n        {\n            while (i <= appointment['counter']) {\n                rows.push(i)\n                i++\n            }\n\n            while (j <= appointment['counter1']) {\n                rows1.push(j)\n                j++\n            }\n        }\n        else{\n            check_appointment = false\n        }\n        \n        \n    }\n\n    console.log(appointment)\n      \n\n    let datee = new Date()\n\n\n    return (\n        <div>\n            <Navbar/>\n            <h1 className=\"title\">My Patients</h1>\n\n            \n\n                {/* <button className=\"btn btn-success\">My profile</button> */}\n                {\n                    check_appointment ? \n                    rows.map((data,key)=>{\n                        \n                        let change_css = \"review_form\"\n\n                        if(datee > appointment['date'][key] || appointment['status'][key] === \"cancel\"){\n                            change_css += \"1\"\n                        }\n                        else{\n                            change_css += \"2\"\n                        }\n                        \n\n                        return(\n                            <div className={change_css} key={key}> \n                                name:  {appointment['name'][key]}<br></br>\n                                {appointment['email'][key]}<br></br>\n                                {appointment['city'][key]}<br></br>\n                                {appointment['phone'][key]}<br></br>\n                                {appointment['date'][key]}<br></br>\n                                {appointment['slot'][key]}<br></br>\n                                Patients: {appointment['patients'][key]}<br></br>\n                                Place: {appointment['clinic'][key]}\n                            </div>\n                        )\n                    })\n                    :\n                    <div className=\"review_form\">\n                        <h1>No Appointments Yet!</h1>\n                    </div>\n                    \n\n                }\n\n\n\n{\n                    check_appointment ? \n                    rows1.map((data,key)=>{\n                        \n                        let change_css = \"review_form\"\n\n                        if(datee > appointment['date1'][key] || appointment['status1'][key] === \"cancel\"){\n                            change_css += \"1\"\n                        }\n                        else{\n                            change_css += \"2\"\n                        }\n                        \n\n                        return(\n                            <div className={change_css} key={key}> \n                                name:  {appointment['name1'][key]}<br></br>\n                                {appointment['email1'][key]}<br></br>\n                                {appointment['city1'][key]}<br></br>\n                                {appointment['phone1'][key]}<br></br>\n                                {appointment['date1'][key]}<br></br>\n                                {appointment['slot1'][key]}<br></br>\n                                Patients: {appointment['patients1'][key]}<br></br>\n                                Place: {appointment['hospital'][key]}\n                            </div>\n                        )\n                    })\n                    :\n                    <div></div>\n\n                }\n\n\n            \n\n\n            \n        </div>\n    );\n}\n\nexport default Appointments;","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/showsearch.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/make_appointment.js",["409","410","411","412","413","414"],"import { Container } from '@material-ui/core';\nimport React, { useState } from 'react'\nimport { Fragment } from 'react';\nimport axios from 'axios';\nimport './../../index.css'\n\nfunction MakeApppointment({ data, doctor_key, indexx, callback }) {\n    let [validdate, setvaliddate] = useState(false)\n    let [holiday, setholiday] = useState()\n    let [showday, setshowday] = useState()\n    let [mapping, setmapping] = useState([])\n    let [date_of_appoinment, set_date_of_appointment] = useState()\n    let [number_patients, set_number_patients] = useState(1)\n\n    let [received_data, set_received_data] = useState({ \"data\": \"\", \"isloading\": false })\n\n    console.log(doctor_key)\n\n    if(!doctor_key)\n    {\n        return(<div>\n            <h1>Loading</h1>\n        </div>)\n    }\n\n\n\n    function into_hours_minutes(timing_start, timing_end) {\n        let slots = []\n        let real_slots = []\n        // console.log(timing_start,timing_end)\n        let hour1 = []\n        let minute1 = []\n        let mode = []\n        let counter = 0;\n        let myarray = []  // contain shifts data---------------------\n\n        timing_start[0].map((data1, key) => {\n            counter = counter + 1\n            myarray.push(data1)\n\n        })\n\n        console.log(myarray)\n\n        let odd_count = -1\n        for (let i = 0; i < timing_end[0].length; i++) {\n            odd_count = odd_count + 2\n            myarray.splice(odd_count, 0, timing_end[0][i])\n            console.log(myarray)\n        }\n\n    \n\n        console.log(myarray)\n\n        myarray.map((data1, key) => {\n            console.log(data1)\n            let hour_min_mode = data1.split(\" \")\n            let mor_eve = hour_min_mode[1]\n            mode.push(mor_eve)\n            hour_min_mode.pop()\n            let hour_min = hour_min_mode[0].split(\":\")\n            // // console.log(hour_min,mor_eve)\n            // let hour_min = hour_min_mode[key].split(\":\")\n\n            let hour = parseInt(hour_min[0])\n            let minute = parseInt(hour_min[1])\n            hour1.push(hour)\n            minute1.push(minute)\n\n\n            // console.log(data1[key].split(\" \")\n\n        })\n\n\n\n        for (let index = 0; index < myarray.length; index = index + 2) {\n\n\n            let a = hour1[index]\n            let b = hour1[index + 1]\n            let m1 = minute1[index]\n            let m2 = minute1[index + 1]\n            slots.push(a + \":\" + m1)\n            while (a <= b) {\n                if (m1 + 15 < 60 && a < b) {\n                    m1 = m1 + 15\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                }\n                else if (m1 + 15 > 60 && a < b) {\n                    m1 = 15 - (60 - m1)\n                    a = a + 1\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                }\n                else if (m1 + 15 === 60 && a < b) {\n                    m1 = 0\n                    a = a + 1\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                }\n                else if (m1 + 15 <= 60 && a === b && m1 + 15 < m2) {\n                    m1 = m1 + 15\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                }\n                else if (m1 + 15 <= 60 && a === b && m1 + 15 >= m2) {\n                    m1 = m2\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                    a = a + 1\n                }\n                else {\n                    a = b + 1\n                }\n\n\n            }\n\n            real_slots.push(slots)\n            slots = []\n\n\n        }\n\n\n\n        return (\n            real_slots\n        )\n\n\n\n\n\n    }\n\n\n\n    function get_array_of_slots(day) {\n        let start = []\n        let end = []\n\n        //  START SLOTS---------------------------------\n\n        let number_of_slots_per_day_start = 0;\n        let slots_of_weeks;\n        if (doctor_key.count === 0) {\n            slots_of_weeks = data.start[indexx].split(\",\")\n        }\n        else if (doctor_key.count === 1) {\n            slots_of_weeks = data.start1[indexx].split(\",\")\n        }\n        else {\n            slots_of_weeks = data.start2[indexx].split(\",\")\n        }\n\n        if (slots_of_weeks[day] !== \"Holiday\") {\n            number_of_slots_per_day_start = slots_of_weeks[day].split(\"-\")\n            number_of_slots_per_day_start.pop()\n            start.push(number_of_slots_per_day_start)\n\n            //     END SLOTS------------------------\n            let slots_end ;\n            if (doctor_key.count === 0) {\n                slots_end = data.end[indexx].split(\",\")\n            }\n            else if (doctor_key.count === 1) {\n                slots_end = data.end1[indexx].split(\",\")\n            }\n            else {\n                slots_end = data.end2[indexx].split(\",\")\n            }\n\n\n            let a = slots_end[day].split(\"-\")\n            a.pop()\n            end.push(a)\n            console.log(\"start\",start)\n            console.log(\"end\",end)\n\n            let my_whole_slots = into_hours_minutes(start, end)\n\n            setmapping(my_whole_slots)\n\n        }\n\n        else {\n            setholiday(1)\n        }\n\n\n        // console.log(start,end)\n\n\n        // END SLOTS---------------------------\n\n\n\n\n\n\n\n\n        // if(slots_of_weeks[appointmentday]===\"Holiday\")\n        // {\n        //     setholiday(\"Holiday\")\n        // }\n        // else{\n        //     number_of_slots_per_day = slots_of_weeks[appointmentday]\n        //     number_of_slots_per_day.pop()\n        //     console.log(number_of_slots_per_day)\n\n        // }\n\n\n\n\n\n\n\n\n    }\n\n\n\n\n\n    function getmeday(day) {\n        let array_of_day = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n        return array_of_day[day]\n    }\n\n    function date(e) {\n        set_date_of_appointment(e.target.value)\n        setholiday(0)\n        let din = 0;\n        let present_date = new Date()\n        let appoinment_date = new Date(e.target.value)\n        console.log(present_date - appoinment_date)\n        if (present_date - appoinment_date > 0) {\n            console.log(\"hiii\")\n            setvaliddate(false)\n        }\n        else {\n            setvaliddate(true)\n        }\n        // console.log(appoinment_date.getDay())\n\n        if (parseInt((appoinment_date.getDay() - 1)) === -1) {\n            din = 6\n        }\n        else\n            din = appoinment_date.getDay() - 1\n\n        setshowday(din)\n        // console.log(din)\n        get_array_of_slots(din)\n\n    }\n\n\n    let api_data = \"\"\n\n    function onclick_submit(value) {\n\n        let appoinment_data = {\n            \"date\": date_of_appoinment,\n            \"doctor_id\": doctor_key['doctor_key'],\n            \"hospital_id\":doctor_key['hospital_key'],\n            \"count\": doctor_key[\"count\"],\n            \"time\": value,\n            \"user_id\": sessionStorage.getItem('user_id'),\n            \"patients\": number_patients\n        }\n\n        console.log(appoinment_data)\n\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n\n\n        axios.post(\n            'http://localhost/back_end/user_appointment.php', appoinment_data, headers\n        ).then(\n            res => {\n                if (res.data.signal == 2) {\n                    alert(res.data.id)\n                }\n                else {\n                    set_received_data({ \"data\": res.data, \"isloading\": true })\n                }\n\n            }\n        );\n\n    }\n\n\n    if (received_data[\"isloading\"]) {\n        return (\n            <div className=\"review_form\">\n                <h1>Appointment made</h1>\n\n            </div>\n\n        )\n    }\n\n\n\n\n\n\n\n    return (\n        <Fragment>\n            <div className=\"review_form\">\n                <div className=\"row\">\n                    <h3>Book Appointment</h3>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <br></br>\n                        select date:  <input type=\"date\" onChange={(e) => date(e)} placeholder=\"select date of appointment\" />\n                    </div>\n                </div>\n                <br></br>\n                <div className=\"row\">\n                    Patients:\n                    <div className=\"col\">\n                        <select className=\"form-select\" id=\"city\" name=\"slot\" onChange={(e) => set_number_patients(parseInt(e.target.value))} aria-label=\"Default select example\">\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                        </select>\n                    </div>\n                </div>\n\n                <br></br>\n                {\n                    validdate ?\n                        <div>\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <h1>{getmeday(showday)}</h1>\n                                </div>\n                            </div>\n                            {\n                    !holiday ?\n                        mapping.map((data, kee) => {\n\n                            return (\n\n                                <div className=\"row\" key={kee}>\n                                    <h4>Shift {kee + 1}</h4>\n\n\n\n\n                                    <div className=\"col\">\n                                        {\n                                            data.map((a, b) => {\n                                                let time_slots = a.split(\":\")\n                                                let c = a\n                                                parseInt(time_slots[0]) > 12 ? a = `${parseInt(time_slots[0]) - 12}:${time_slots[1]} PM` : a = `${time_slots[0]}:${time_slots[1]} AM`\n                                                parseInt(time_slots[0]) === 12 ? a = `${parseInt(time_slots[0])}:${time_slots[1]} PM` : <div></div>\n                                                parseInt(time_slots[0]) === 0 ? a = `${parseInt(time_slots[0]) + 12}:${time_slots[1]} AM` : <div></div>\n\n\n\n\n\n                                                return (\n                                                    <Fragment key={b}>\n                                                        <button value={a} onClick={(e) => onclick_submit(e.target.value)} className=\"btn btn-outline-success appoinment\">{a}</button>\n                                                    </Fragment>\n                                                )\n                                            })\n                                        }\n                                    </div>\n\n                                </div>\n                            )\n\n                        })\n\n\n\n                        :\n\n                        <h5>Holiday</h5>\n\n\n\n\n                }\n                        </div>\n                        :\n                        <div className=\"error\">Not Valid</div>\n\n\n                }\n\n                {/* {\n                    !holiday ?\n                        mapping.map((data, kee) => {\n\n                            return (\n\n                                <div className=\"row\" key={kee}>\n                                    <h4>Shift {kee + 1}</h4>\n\n\n\n\n                                    <div className=\"col\">\n                                        {\n                                            data.map((a, b) => {\n                                                let time_slots = a.split(\":\")\n                                                let c = a\n                                                parseInt(time_slots[0]) > 12 ? a = `${parseInt(time_slots[0]) - 12}:${time_slots[1]} PM` : a = `${time_slots[0]}:${time_slots[1]} AM`\n                                                parseInt(time_slots[0]) === 12 ? a = `${parseInt(time_slots[0])}:${time_slots[1]} PM` : <div></div>\n                                                parseInt(time_slots[0]) === 0 ? a = `${parseInt(time_slots[0]) + 12}:${time_slots[1]} AM` : <div></div>\n\n\n\n\n\n                                                return (\n                                                    <Fragment key={b}>\n                                                        <button value={a} onClick={(e) => onclick_submit(e.target.value)} className=\"btn btn-outline-success appoinment\">{a}</button>\n                                                    </Fragment>\n                                                )\n                                            })\n                                        }\n                                    </div>\n\n                                </div>\n                            )\n\n                        })\n\n\n\n                        :\n\n                        <h5>Holiday</h5>\n\n\n\n\n                } */}\n                <button className=\"btn btn-primary back\" onClick={() => callback(0, false)}>Back</button>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default MakeApppointment;","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/my_appointments.js",["415"],"import React, { useState,useEffect } from 'react'\nimport Navbar from '../navbar'\nimport \"./../../index.css\"\nimport {get_user_appoinments,cancel_appoinments} from './../api_requests/login'\n\n\nfunction User_Appointments() {\n\n    let id = sessionStorage.getItem('user_id')\n\n    \n\n    let [appointment,setappointment] = useState([])\n    let [appointment_cancel,set_appointment_cancel] = useState(0)\n    let [message,set_message] = useState(\"\")\n\n    let check_appointment = true\n\n    // for doctors \n    let i = 1;\n    let rows = []\n    //  for hospitals\n    let j= 1\n    let rows1 = []\n    \n\n    useEffect(() => {\n        async function data_show(id) {\n          let real_data = await get_user_appoinments(id);\n\n          setappointment(real_data);\n        }\n        data_show(id);\n      },[id]);\n\n\n    //   for cancelation of appointment\n\n      useEffect(() => {\n        async function appointment_del(id) {\n          let real_data = await cancel_appoinments(id);\n\n          set_message(real_data);\n        }\n        appointment_del(appointment_cancel);\n      },[appointment_cancel]);\n\n\n\n\n    \n      if (!appointment)\n        return (<h1>Loading...</h1>)\n    else\n    {\n        if(appointment['counter']>0 || appointment['counter1'] > 0)\n        {\n            while (i <= appointment['counter']) {\n                rows.push(i)\n                i++\n            }\n\n            while (j <= appointment['counter1']) {\n                rows1.push(j)\n                j++\n            }\n\n            \n        }\n        else{\n            check_appointment = false\n        }\n        \n        \n    }\n\n    console.log(appointment)\n\n    function cancel_appointment(id)\n    {\n        set_appointment_cancel(parseInt(id))\n        window.location.reload(false)\n    }\n      \n\n    let datee = new Date() / 1000\n\n    return (\n        <div>\n            <Navbar/>\n            <h1 className=\"title\">Doctor Appointments</h1>\n\n            \n\n                {/*                      for doctors                   */}\n                {\n                    check_appointment ? \n                    rows.map((data,key)=>{\n                        \n                        let change_css = \"review_form\"\n\n                        if(datee > new Date(appointment['date'][key]) / 1000 || appointment['status'][key] === \"cancel\"){\n                            change_css += \"1\"\n                        }\n                        else{\n                            console.log(datee,appointment['date'][key])\n                            change_css += \"2\"\n                        }\n\n\n\n                        return(\n\n                        \n                            <div className={change_css} key={key}>\n                                <h1>Doctors Detail</h1>\n                                name:  <b>{appointment['name'][key]}</b><br></br>\n                                email: <b>{appointment['email'][key]}</b><br></br>\n                                city: <b>{appointment['city'][key]}</b><br></br>\n                                phone: <b>{appointment['phone'][key]}</b><br></br>\n                                appointment_date: <b>{appointment['date'][key]}</b><br></br>\n                                slot: <b>{appointment['slot'][key]}</b><br></br>\n                                number_of_appointments: <b>{appointment['patients'][key]}</b><br></br>\n                                doctor_id: <b>{appointment['doctor_id'][key]}</b><br></br>\n                                experience: <b>{appointment['experience'][key]}</b><br></br>\n                                clinic: <b>{appointment['clinic'][key]}</b><br></br>\n                                address: <b>{appointment['address'][key]}</b><br></br>\n                                {\n                                    appointment['status'][key] === \"active\" ? \n                                    <input type=\"submit\" className=\"btn btn-primary\" onClick={()=>cancel_appointment(appointment['appointment_id'][key])} value=\"Cancel Appointment\" />\n                                    :\n                                    <p className=\"error\">Canceled!</p>\n                                }\n\n                            </div>\n                        )\n                    })\n                    :\n                    <div className=\"review_form\">\n                        <h1>No Appointments Yet!</h1>\n                    </div>\n                    \n\n                }\n\n\n\n\n                {/*    For hospitals */}\n\n\n                {\n                    check_appointment ? \n                    rows1.map((data,key)=>{\n                        \n                        let change_css = \"review_form\"\n\n                        if(datee > new Date(appointment['date1'][key]) / 1000 || appointment['status1'][key] === \"cancel\"){\n                            change_css += \"1\"\n                        }\n                        else{\n                            console.log(datee,appointment['date1'][key])\n                            change_css += \"2\"\n                        }\n\n\n\n                        return(\n\n                        \n                            <div className={change_css} key={key}>\n                                <h1>Doctors Detail</h1>\n                                name:  <b>{appointment['name1'][key]}</b><br></br>\n                                email: <b>{appointment['email1'][key]}</b><br></br>\n                                city: <b>{appointment['city1'][key]}</b><br></br>\n                                phone: <b>{appointment['phone1'][key]}</b><br></br>\n                                appointment_date: <b>{appointment['date1'][key]}</b><br></br>\n                                slot: <b>{appointment['slot1'][key]}</b><br></br>\n                                number_of_appointments: <b>{appointment['patients1'][key]}</b><br></br>\n                                doctor_id: <b>{appointment['doctor_id1'][key]}</b><br></br>\n                                experience: <b>{appointment['experience1'][key]}</b><br></br>\n                                hospital: <b>{appointment['hospital'][key]}</b><br></br>\n                                address: <b>{appointment['address1'][key]}</b><br></br>\n                                {\n                                    appointment['status1'][key] === \"active\" ? \n                                    <input type=\"submit\" className=\"btn btn-primary\" onClick={()=>cancel_appointment(appointment['appointment_id1'][key])} value=\"Cancel Appointment\" />\n                                    :\n                                    <p className=\"error\">Canceled!</p>\n                                }\n\n                            </div>\n                        )\n                    })\n                    :\n                    <div></div>\n                    \n\n                }\n\n\n            \n\n\n            \n        </div>\n    );\n}\n\nexport default User_Appointments;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/login.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/stepper.js",["416","417","418","419"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nimport Navbar from './../../navbar'\nimport HospitalSignup from './signup_form'\nimport EducationForm from './education_form'\nimport Review from './review'\nimport HosSign from './login'\nimport { Fragment } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\n\n\nfunction getSteps() {\n    return ['Register Data', 'Hospital Info', 'Review'];\n}\n\nfunction getStepContent(stepIndex, setStep, setformValues, formValues, setformValuesEducation, formValuesEducation) {\n    switch (stepIndex) {\n        case 0:\n            return <HospitalSignup submit={setStep} preValues={formValues} setformValues={setformValues} />;\n        case 1:\n            return <EducationForm submit={setStep} formValuesEducation={formValuesEducation} setformValuesEducation={setformValuesEducation} />;\n        case 2:\n            return <Review submit={setStep} values={[formValues, formValuesEducation]} />;\n\n\n    }\n}\n\nexport default function HospitalSignupFront() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [formValues, setformValues] = React.useState({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        city: \"\",\n        phone: \"\",\n        address: \"\",\n        hospital: \"\",\n        numberDoctor: \"\",\n        speciality: \"\"\n    })\n\n    const [formValuesEducation, setformValuesEducation] = React.useState({\n        hospital: \"\",\n        numberDoctor: \"\",\n        speciality: \"\"\n    })\n\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n\n    if (activeStep === 3) {\n        return (\n            <HosSign />\n        )\n    }\n\n    return (\n        <Fragment>\n            <Navbar />\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                {\n                    getStepContent(activeStep, setActiveStep, setformValues, formValues, setformValuesEducation, formValuesEducation)\n                }\n\n\n\n            </div>\n        </Fragment>\n    );\n}\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/signup_form.js",["420","421","422"],"import React, { Fragment } from 'react'\nimport { useFormik,Field } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../../../index.css\"\nimport axios from 'axios';\n\nfunction HospitalSignup({submit,setformValues,preValues}) {\n\n    const formik = useFormik({\n        initialValues: {\n            name: preValues.name,\n            email: preValues.email,\n            password: preValues.password,\n            city: preValues.city,\n            phone: preValues.phone,\n            address: preValues.address,\n        },\n        onSubmit: values => {\n            setformValues({...values})\n            submit(1)\n            \n\n        },\n        validationSchema: yup.object({\n            name: yup.string().matches(\"^[a-zA-Z ]{1,}[^0-9]$\", \"Invalid name, only use text\").required(\"This field is required!\"),\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            password: yup.string().min(6, \"Must be greater than 5 digits\").max(10, \"Must be less than 11 digits\").required(\"This field is required!\"),\n            city: yup.string().matches(\"^[a-zA-Z]{3,}$\", \"Only use text must be greater than 3 words\").required(\"This field is required!\"),\n            phone: yup.string().matches(\"^[1-9]{1}[0-9]{9}$\", \"Start number with 1-9 and must 10 digit long\").required(\"This field is required!\"),\n            address: yup.string().required(\"This field is required!\")\n        })\n    })\n\n   \n\n\n\n    return (\n\n        \n        <div className=\"doctor_form\">\n            <form onSubmit={formik.handleSubmit}>\n                <h3>Register</h3>\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"name\" className=\"form-label\">Name</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.name} onChange={formik.handleChange} id=\"name\" placeholder=\"Enter name\" />\n                    {formik.errors.name ? <div className=\"error\">{formik.errors.name}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                    <input type=\"email\" className=\"form-control\" value={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                    {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                    <input type=\"password\" className=\"form-control\" value={formik.values.password} onChange={formik.handleChange} id=\"password\" placeholder=\"Enter password\" />\n                    {formik.errors.password ? <div className=\"error\">{formik.errors.password}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"city\" className=\"form-label\">City</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.city} onChange={formik.handleChange} id=\"city\" placeholder=\"Enter city name\" />\n                    {formik.errors.city ? <div className=\"error\">{formik.errors.city}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"phone\" className=\"form-label\">Cell #</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.phone} onChange={formik.handleChange} id=\"phone\" placeholder=\"+92 xxxxxxxxxx\" />\n                    {formik.errors.phone ? <div className=\"error\">{formik.errors.phone}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"address\" className=\"form-label\">Address</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.address} onChange={formik.handleChange} id=\"address\" placeholder=\"Enter Address\" />\n                    {formik.errors.address ? <div className=\"error\">{formik.errors.address}</div> : \"\"}\n                </div>\n\n\n                <div className=\"mb-6 p-2 register_button\">\n                    <button type=\"submit\" className=\"btn btn-success\">Next</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default HospitalSignup;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/education_form.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/register_hospital/review.js",["423"],"import React, { useState } from 'react'\nimport \"./../../../index.css\"\nimport axios from 'axios';\n\n\n\nfunction Review({ submit, values }) {\n\n\n\n\n\n\n\n    let specialists = \"\"\n\n\n\n    function onSubmit() {\n\n\n\n        for (let j = 0; values[1].speciality.length - 1 >= j; j++) {\n            specialists = specialists + \"| \" + values[1].speciality[j] + \" \"\n        }\n\n\n\n        const registration_data = {\n            name: values[0].name,\n            email: values[0].email,\n            password: values[0].password,\n            city: values[0].city,\n            phone: values[0].phone,\n            address: values[0].address,\n            category: \"hospital\",\n            hospital: values[1].hospital,\n            numberDoctor: values[1].numberDoctor,\n            speciality: specialists\n        }\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n        console.log(registration_data)\n\n\n\n\n        axios.post(\n            'http://localhost/back_end/hospital_signup.php', registration_data, headers\n        ).then(\n            res => {\n                alert(res.data.id)\n                submit(3)\n\n\n\n            }\n        );\n\n\n    }\n\n\n\n    return (\n        <div className=\"review_form\">\n            <h2>Review</h2>\n            <br></br>\n            <h4>Registration Data</h4>\n            <p>{values[0].name}</p>\n            <p>{values[0].email}</p>\n            <p>{values[0].password}</p>\n            <p>{values[0].city}</p>\n            <p>0{values[0].phone}</p>\n            <p>{values[0].address}</p>\n            <h4>Hospital Data</h4>\n            <p>{values[1].hospital}</p>\n            <p>{values[1].numberDoctor}</p>\n\n\n            <p>{values[1].speciality}</p>\n\n\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <button className=\"btn btn-primary float-right\" onClick={() => submit(1)}>Back</button>\n                </div>\n\n                <div className=\"col\">\n                    {\n                        values[1].speciality.length === 0 ?\n                            <p className=\"error\">Plz select specialists!</p>\n                            :\n                            <button className=\"btn btn-success float-left\" onClick={onSubmit}>Submit</button>\n\n                    }\n                </div>\n            </div>\n\n\n\n\n\n\n\n\n\n        </div>\n    );\n}\n\nexport default Review;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospital_page.js",["424"],"import React from 'react'\nimport HosSign from './hospitals/register_hospital/login'\nimport Hospital_appointments from './hospitals/show_hospital_data/show_appointments'\nfunction Hospital() {\n\n    return (\n        <div>\n            {sessionStorage.getItem('hospital_id')===null?\n            <HosSign/>\n            :\n            <Hospital_appointments/>\n        \n        }\n            \n        </div>\n    );\n}\n\nexport default Hospital;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/show_hospital_data/show_appointments.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/add_doctors/search_doctor.js",["425"],"import React, { useState } from 'react'\nimport { useFormik } from \"formik\";\nimport { Link } from 'react-router-dom'\nimport * as yup from \"yup\"\nimport axios from 'axios';\nimport DoctorExistStepper from './stepper'\nimport { Fragment } from 'react';\nimport \"./../../../index.css\"\nimport Navbar from './../../navbar'\nimport HosDocStepper from './../doctor_signup/stepper'\n\n\nfunction SearchDoctor() {\n\n\n    let [add_slots, set_add_slots] = useState(false)\n    let [add_doctor, set_add_doctor] = useState(false)\n    let [doctorID,setdoctorID] = useState(\"\")\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"\"\n        },\n        onSubmit: (values) => {\n            var headers = {\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            }\n\n\n\n\n            axios.post(\n                'http://localhost/back_end/search_doctor_email.php', values, headers\n            ).then(\n                res => {\n                    if (res.data.signal === 1) {\n                        alert(res.data.id)\n                        set_add_slots(true)\n                        setdoctorID(res.data.doctor_id)\n\n\n                    }\n                    else if(res.data.signal === 2){\n                        console.log(res.data)\n                        alert(res.data.id)\n                        set_add_doctor(true)\n\n                    }\n                    else{\n                        console.log(res.data)\n                        alert(res.data.id)\n                    }\n\n                }\n            );\n\n        },\n        validationSchema: yup.object({\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\")\n\n        })\n    })\n\n\n\n    function shift_page_slot(flag)\n    {\n        set_add_slots(flag)\n    }\n\n    function  shift_page_doctor(flag) {\n        set_add_doctor(flag)\n    }\n\n    if(add_slots)\n    {\n        return(\n            <DoctorExistStepper back_slots = {shift_page_slot} doctor_id = {doctorID}/>\n        )\n    }\n\n    if(add_doctor)\n    {\n        return(\n            <HosDocStepper back_slots = {shift_page_doctor} />\n        )\n    }\n    \n\n\n    \n\n    \n\n\n\n\n    return (\n        <Fragment>\n            <Navbar/>\n            <div className=\"doctor_form\">\n                <form onSubmit={formik.handleSubmit}>\n                    <h3 align='center'>Search Doctor</h3>\n\n                    <div className=\"mb-2 p-2\">\n                        <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                        <input type=\"email\" className=\"form-control\" values={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                        {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                    </div>\n\n\n                    <div className=\"row mb-2 p-2\">\n                        <div className=\"col-lg-6 col-sm-6\">\n                            <button type=\"submit\" className=\"btn btn-success\">Search</button>\n                        </div>\n                    </div>\n\n                </form>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default SearchDoctor;;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/add_doctors/add_doctor_slots.js",["426","427"],"import React, { Fragment, useState } from 'react'\nimport \"./../../../index.css\"\nimport DaySlots from './../../doctors/day'\nimport Navbar from './../../navbar'\nimport ReviewAlready from './add_doctor_slots'\n\n\nfunction DocSlotsAlready({submit,set_data,back_slotss}) {\n\n\n    const [mondaySlots,setmondaySlots] = useState([])\n    const [tuesdaySlots,settuesdaySlots] = useState([])\n    const [wednesdaySlots,setwednesdaySlots] = useState([])\n    const [thursdaySlots,setthursdaySlots] = useState([])\n    const [fridaySlots,setfridaySlots] = useState([])\n    const [saturdaySlots,setsaturdaySlots] = useState([])\n    const [sundaySlots,setsundaySlots] = useState([])\n\n\n    const [mondaycheck,setmondaycheck] = useState(false)\n    const [tuesdaycheck,settuesdaycheck] = useState(false)\n    const [wednesdaycheck,setwednesdaycheck] = useState(false)\n    const [thursdaycheck,setthursdaycheck] = useState(false)\n    const [fridaycheck,setfridaycheck] = useState(false)\n    const [saturdaycheck,setsaturdaycheck] = useState(false)\n    const [sundaycheck,setsundaycheck] = useState(false)\n\n\n    function ondeliver() {\n        if (mondaycheck && tuesdaycheck && wednesdaycheck && thursdaycheck && fridaycheck && saturdaycheck && sundaycheck) {\n        \n            \n\n            let mon = {\"numberOfTickets\": String(mondaySlots['tickets'].length) ,\"tickets\": mondaySlots['tickets']}\n            let tues = {\"numberOfTickets\": String(tuesdaySlots['tickets'].length) ,\"tickets\": tuesdaySlots['tickets']}\n            let wed = {\"numberOfTickets\": String(wednesdaySlots['tickets'].length) ,\"tickets\": wednesdaySlots['tickets']}\n            let thurs = {\"numberOfTickets\": String(thursdaySlots['tickets'].length) ,\"tickets\": thursdaySlots['tickets']}\n            let fri = {\"numberOfTickets\": String(fridaySlots['tickets'].length) ,\"tickets\": fridaySlots['tickets']}\n            let satur = {\"numberOfTickets\": String(saturdaySlots['tickets'].length) ,\"tickets\": saturdaySlots['tickets']}\n            let sun = {\"numberOfTickets\": String(sundaySlots['tickets'].length),\"tickets\": sundaySlots['tickets']}\n\n            set_data([mon,tues,wed,thurs,fri,satur,sun])\n            submit(1)\n            \n\n        }\n        else{\n            alert(\"Complete your slots!\")\n        }\n    }\n\n\n    \n\n\n\n\n    return (\n        <Fragment>\n    \n    \n            \n            <h2 align=\"center\">Slots</h2>\n        \n            <DaySlots setDay={setmondaySlots} day=\"Monday\" check={setmondaycheck}/>\n            <DaySlots setDay={settuesdaySlots} day=\"Tuesday\" check={settuesdaycheck}/>\n            <DaySlots setDay={setwednesdaySlots} day=\"Wednesday\" check={setwednesdaycheck}/>\n            <DaySlots setDay={setthursdaySlots} day=\"Thursday\" check={setthursdaycheck}/>\n            <DaySlots setDay={setfridaySlots} day=\"Friday\" check={setfridaycheck}/>\n            <DaySlots setDay={setsaturdaySlots} day=\"Saturday\" check={setsaturdaycheck}/>\n            <DaySlots setDay={setsundaySlots} day=\"Sunday\" check={setsundaycheck}/>\n            <br></br>\n            <div className=\"row\">\n                <div className=\"col col-5\">\n\n                </div>\n                <div className=\"col\">\n                <button align=\"center\" className=\"btn btn-success\" onClick={ondeliver}>Submit all slots</button>\n                </div>\n            </div>\n            <br></br>\n\n            <button className=\"btn btn-success back\" onClick={() => back_slotss(false)}>Back </button>\n\n\n            \n    \n        </Fragment>\n\n\n    )\n\n\n}\n\nexport default DocSlotsAlready;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/add_doctors/stepper.js",["428","429","430","431","432"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nimport Navbar from './../../navbar'\nimport DocSlotsAlready from './add_doctor_slots'\nimport SearchDoctor from './search_doctor'\nimport ReviewAlready from './add_doctor_review'\nimport { Fragment } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\n\n\nfunction getSteps() {\n    return ['Slots', 'Review'];\n}\n\nfunction getStepContent(stepIndex, setStep,set_slots_timing,slots_timing,back_slots,doctor_id) {\n    switch (stepIndex) {\n        case 0:\n            return <DocSlotsAlready submit={setStep} set_data = {set_slots_timing} back_slotss = {back_slots}/>;\n        case 1:\n            return <ReviewAlready submit={setStep} slots_data = {slots_timing} back_to_search = {back_slots} doctor_id = {doctor_id}/>;\n\n\n    }\n}\n\nexport default function DoctorExistStepper({back_slots,doctor_id}) {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n\n    let [slots_timing,set_slots_timing] = useState([])\n\n\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n\n\n    return (\n        <Fragment>\n            <Navbar />\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                {\n                    getStepContent(activeStep, setActiveStep, set_slots_timing, slots_timing,back_slots,doctor_id)\n                }\n\n\n\n            </div>\n        </Fragment>\n    );\n}\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/add_doctors/add_doctor_review.js",["433"],"import React, { useState } from 'react'\nimport \"./../../../index.css\"\nimport axios from 'axios';\n\n\n\nfunction ReviewAlready({ submit, slots_data, back_to_search, doctor_id }) {\n\n\n\n    let monday_slots = slots_data[0]\n    let tuesday_slots = slots_data[1]\n    let wednesday_slots = slots_data[2]\n    let thursday_slots = slots_data[3]\n    let friday_slots = slots_data[4]\n    let saturday_slots = slots_data[5]\n    let sunday_slots = slots_data[6]\n\n    let monday_database = [\"\", \"\"]\n    let tuesday_database = [\"\", \"\"]\n    let wednesday_database = [\"\", \"\"]\n    let thursday_database = [\"\", \"\"]\n    let friday_database = [\"\", \"\"]\n    let saturday_database = [\"\", \"\"]\n    let sunday_database = [\"\", \"\"]\n\n\n    function get_mapped_data(data) {\n        let i = 1;\n        let rows = []\n        while (i <= parseInt(data)) {\n            rows.push(i)\n            i++\n        }\n        return rows\n    }\n\n\n\n    // console.log(doctor_id)\n    // console.log(sessionStorage.getItem(\"hospital_id\"))\n\n\n\n    function onSubmit() {\n\n\n\n        let starting = `${monday_database[0]},${tuesday_database[0]},${wednesday_database[0]},${thursday_database[0]},${friday_database[0]},${saturday_database[0]},${sunday_database[0]}`\n        let ending = `${monday_database[1]},${tuesday_database[1]},${wednesday_database[1]},${thursday_database[1]},${friday_database[1]},${saturday_database[1]},${sunday_database[1]}`\n\n        const registration_data = {\n            doctor_id: doctor_id,\n            hospital_id:    sessionStorage.getItem(\"hospital_id\"), \n            start: starting,\n            end: ending\n        }\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n\n\n\n        axios.post(\n            'http://localhost/back_end/add_doctor_slots.php', registration_data, headers\n        ).then(\n            res => {\n\n                if(res.data.signal === 1)\n                {\n                    alert(res.data.id)\n                    back_to_search(false)\n                }\n                else{\n                    alert(res.data.id)\n                    back_to_search(false)\n                }\n\n\n\n\n            }\n        );\n\n\n    }\n\n\n\n    return (\n        <div className=\"review_form\">\n            <h2>Review</h2>\n            <br></br>\n\n            {/*  ------------------------------------MONDAY----------------------------- */}\n            <h4>Slots</h4>\n            <b>Monday</b>\n            {\n                monday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(monday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = monday_slots.tickets[key].email.split(\":\")\n                        console.log(start_data)\n                        const end_data = monday_slots.tickets[key].name.split(\":\")\n                        console.log(end_data)\n                        let start_time = \"\"\n                        let end_time = \"\"\n\n\n\n\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        monday_database[0] = monday_database[0].concat(end_time + \"-\")\n                        monday_database[1] = monday_database[1].concat(start_time + \"-\")\n\n\n\n\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n\n                    get_mapped_data(1).map((data, key) => {\n                        monday_database[0] = \"Holiday\"\n                        monday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Tuesday----------------------------- */}\n\n            <h5>Tuesday</h5>\n            {\n                tuesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(tuesday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = tuesday_slots.tickets[key].email.split(\":\")\n                        const end_data = tuesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n\n                        tuesday_database[0] = tuesday_database[0].concat(end_time + \"-\")\n                        tuesday_database[1] = tuesday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        tuesday_database[0] = \"Holiday\"\n                        tuesday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Wednesday----------------------------- */}\n\n            <h5>Wednesday</h5>\n            {\n                wednesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(wednesday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = wednesday_slots.tickets[key].email.split(\":\")\n                        const end_data = wednesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        wednesday_database[0] = wednesday_database[0].concat(end_time + \"-\")\n                        wednesday_database[1] = wednesday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        wednesday_database[0] = \"Holiday\"\n                        wednesday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n\n\n            {/*  ------------------------------------Thursday----------------------------- */}\n\n            <h5>Thursday</h5>\n            {\n                thursday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(thursday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = thursday_slots.tickets[key].email.split(\":\")\n                        const end_data = thursday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        thursday_database[0] = thursday_database[0].concat(end_time + \"-\")\n                        thursday_database[1] = thursday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        thursday_database[0] = \"Holiday\"\n                        thursday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Friday----------------------------- */}\n\n            <h5>Friday</h5>\n            {\n                friday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(friday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = friday_slots.tickets[key].email.split(\":\")\n                        const end_data = friday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        friday_database[0] = friday_database[0].concat(end_time + \"-\")\n                        friday_database[1] = friday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        friday_database[0] = \"Holiday\"\n                        friday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Saturday----------------------------- */}\n\n            <h5>Saturday</h5>\n            {\n                saturday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(saturday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = saturday_slots.tickets[key].email.split(\":\")\n                        const end_data = saturday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        saturday_database[0] = saturday_database[0].concat(end_time + \"-\")\n                        saturday_database[1] = saturday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        saturday_database[0] = \"Holiday\"\n                        saturday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Sunday----------------------------- */}\n\n            <h5>Sunday</h5>\n            {\n                sunday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(sunday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = sunday_slots.tickets[key].email.split(\":\")\n                        const end_data = sunday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        sunday_database[0] = sunday_database[0].concat(end_time + \"-\")\n                        sunday_database[1] = sunday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        sunday_database[0] = \"Holiday\"\n                        sunday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <button className=\"btn btn-danger\" onClick={() => submit(0)}>Back</button>\n                </div>\n                <div className=\"col\">\n                    <button className=\"btn btn-secondary\" onClick={onSubmit}>Submit</button>\n                </div>\n                <div className=\"col\">\n\n                    <button className=\"btn btn-success\" onClick={() => back_to_search(false)}>Search Doctor</button>\n                </div>\n\n            </div>\n\n\n\n\n\n\n\n        </div>\n    );\n}\n\nexport default ReviewAlready;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/stepper.js",["434","435","436","437"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nimport Navbar from './../../navbar'\nimport SignupForm from './doc_basic'\nimport EducationForm from './doc_education'\nimport Review from './doc_review'\nimport DocSlots from './doc_slots'\nimport { Fragment } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\n\n\nfunction getSteps() {\n    return ['Register Data', 'Education Info', 'Slots', 'Review'];\n}\n\nfunction getStepContent(stepIndex, setStep, setformValues, formValues, setformValuesEducation, formValuesEducation, doctor_slots, set_doctor_slots,back_slots) {\n    switch (stepIndex) {\n        case 0:\n            return <SignupForm submit={setStep} preValues={formValues} setformValues={setformValues} back_slots={back_slots}/>;\n        case 1:\n            return <EducationForm submit={setStep} formValuesEducation={formValuesEducation} setformValuesEducation={setformValuesEducation} back_slots={back_slots}/>;\n        case 2:\n            return <DocSlots submit={setStep} set_values={set_doctor_slots} back_slots={back_slots}/>;\n        case 3:\n            return <Review submit={setStep} values={[formValues, formValuesEducation]} slots_data={doctor_slots} back_slots={back_slots}/>;\n\n\n    }\n}\n\nexport default function HosDocStepper({back_slots}) {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [doctor_slots, set_doctor_slots] = React.useState([]);\n    const [formValues, setformValues] = React.useState({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        city: \"\",\n        phone: \"\",\n        address: \"\",\n        // clinic: \"\",\n        experience: \"\",\n        fees: \"\",\n        speciality: \"\",\n        qualification: \"\"\n    })\n\n    const [formValuesEducation, setformValuesEducation] = React.useState({\n        // clinic: \"\",\n        experience: \"\",\n        fees: \"\",\n        speciality: \"\",\n        qualification: \"\"\n    })\n\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n\n    // if (activeStep === 4) {\n    //     return (\n    //         <Doctor />\n    //     )\n    // }\n\n    return (\n        <Fragment>\n            <Navbar />\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                {\n                    getStepContent(activeStep, setActiveStep, setformValues, formValues, setformValuesEducation, formValuesEducation, doctor_slots, set_doctor_slots,back_slots)\n                }\n\n\n\n            </div>\n        </Fragment>\n    );\n}\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/doc_basic.js",["438","439","440"],"import React, { Fragment } from 'react'\nimport { useFormik,Field } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../../../index.css\"\nimport axios from 'axios';\n\nfunction SignupForm({submit,setformValues,preValues,back_slots}) {\n\n    const formik = useFormik({\n        initialValues: {\n            name: preValues.name,\n            email: preValues.email,\n            password: preValues.password,\n            city: preValues.city,\n            phone: preValues.phone,\n            address: preValues.address,\n        },\n        onSubmit: values => {\n            setformValues({...values})\n            submit(1)\n            \n\n\n            // var headers = {\n            //     \"Content-Type\": \"application/json;charset=UTF-8\",\n            // }\n\n\n\n            // axios.post(\n            //     'http://localhost/back_end/go.php', values, headers\n            // ).then(\n            //     res => {\n            //         console.log(res.data)\n            //     }\n            // );\n\n        },\n        validationSchema: yup.object({\n            name: yup.string().matches(\"^[a-zA-Z ]{1,}[^0-9]$\", \"Invalid name, only use text\").required(\"This field is required!\"),\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            password: yup.string().min(6, \"Must be greater than 5 digits\").max(10, \"Must be less than 11 digits\").required(\"This field is required!\"),\n            city: yup.string().matches(\"^[a-zA-Z]{3,}$\", \"Only use text must be greater than 3 words\").required(\"This field is required!\"),\n            phone: yup.string().matches(\"^[1-9]{1}[0-9]{9}$\", \"Start number with 1-9 and must 10 digit long\").required(\"This field is required!\"),\n            address: yup.string().required(\"This field is required!\")\n        })\n    })\n\n\n    // const submithandler = (event) =>{\n    //         event.preventDefault();\n    //         console.log(first)\n    //         console.log(second)\n\n\n    //     var headers = {\n    //         \"Content-Type\": \"application/json;charset=UTF-8\",\n    //     }\n\n\n\n    //     axios.post(\n    //         'http://localhost/back_end/connection.php',{id:1,namee:\"nadeem\"}, headers\n    //     ).then(\n    //         res =>{\n    //             console.log(res.data.id)\n    //         }\n    //     );\n\n\n\n    // }\n\n   \n\n\n\n    return (\n\n        \n        <div className=\"doctor_form\">\n            <form onSubmit={formik.handleSubmit}>\n                <h3>Register</h3>\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"name\" className=\"form-label\">Name</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.name} onChange={formik.handleChange} id=\"name\" placeholder=\"Enter name\" />\n                    {formik.errors.name ? <div className=\"error\">{formik.errors.name}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                    <input type=\"email\" className=\"form-control\" value={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                    {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                    <input type=\"password\" className=\"form-control\" value={formik.values.password} onChange={formik.handleChange} id=\"password\" placeholder=\"Enter password\" />\n                    {formik.errors.password ? <div className=\"error\">{formik.errors.password}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"city\" className=\"form-label\">City</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.city} onChange={formik.handleChange} id=\"city\" placeholder=\"Enter city name\" />\n                    {formik.errors.city ? <div className=\"error\">{formik.errors.city}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"phone\" className=\"form-label\">Cell #</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.phone} onChange={formik.handleChange} id=\"phone\" placeholder=\"+92 xxxxxxxxxx\" />\n                    {formik.errors.phone ? <div className=\"error\">{formik.errors.phone}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"address\" className=\"form-label\">Address</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.address} onChange={formik.handleChange} id=\"address\" placeholder=\"Enter Address\" />\n                    {formik.errors.address ? <div className=\"error\">{formik.errors.address}</div> : \"\"}\n                </div>\n\n\n                <div className=\"mb-6 p-2 register_button\">\n                    <button type=\"submit\" className=\"btn btn-success\">Next</button>\n                    \n                </div>\n                <button className=\"btn btn-success back\" onClick={() => back_slots(false)}>Search Doctor</button>\n            </form>\n        </div>\n    );\n}\n\nexport default SignupForm;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/doc_education.js",["441"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../../../index.css\"\n\nimport { get_specialist } from './../../api_requests/login'\nimport axios from 'axios';\n\nfunction EducationForm({ submit, setformValuesEducation, formValuesEducation, back_slots }) {\n\n    let [myspecialist, setspecialist] = useState(\"\")\n\n    let hospital_id_get = sessionStorage.getItem(\"hospital_id\")\n\n\n    const formik = useFormik({\n        initialValues: {\n\n            // clinic: formValuesEducation.clinic,\n            experience: formValuesEducation.experience,\n            fees: formValuesEducation.fees,\n            speciality: formValuesEducation.speciality,\n            qualification: formValuesEducation.qualification,\n        }\n        ,\n        onSubmit: (values) => {\n\n            submit(2)\n            setformValuesEducation({ ...values })\n\n\n        },\n        validationSchema: yup.object({\n            // clinic: yup.string().matches(\"^[a-zA-Z ]{1,}\", \"Only use alphabets and space!\").required(\"This field is required!\"),\n            fees: yup.number().min(0, \"Too short\").max(10000, \"Too long\").required(\"This field is required!\"),\n            experience: yup.number().max(60, \"Too long\").required(\"This field is required!\"),\n            speciality: yup.string().matches(\"[^none]\", \"This field is required\").required(\"This field is required!\"),\n            qualification: yup.string().matches(\"^[a-zA-Z, ]*[a-zA-Z]$\", \"Only use space, comma, text\").required(\"This field is required!\")\n\n        })\n    })\n\n\n\n    //  --------------- getting specilists data-------------\n\n    //   for cancelation of appointment\n\n    useEffect(() => {\n        async function appointment_del(id) {\n            let real_data = await get_specialist(id);\n\n            setspecialist(real_data);\n        }\n        appointment_del(hospital_id_get);\n    }, [hospital_id_get]);\n\n\n\n        let i = 0;\n        let rows = []\n        while (i < myspecialist.length) {\n            rows.push(i)\n            i++\n        }\n    \n    \n\n\n\n    // if(myspecialist)\n    // {\n\n    //     let my_data = \n\n    // }\n\n\n\n\n    return (\n        <div className=\"doctor_form\">\n            <form onSubmit={formik.handleSubmit}>\n                <h3>Education Info</h3>\n\n                {/* <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"clinic\" className=\"form-label\">Clinic Name</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.clinic} onChange={formik.handleChange} id=\"clinic\" placeholder=\"Enter clinic name\" />\n                    {formik.errors.clinic ? <div className=\"error\">{formik.errors.clinic}</div> : \"\"}\n                </div> */}\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"experience\" className=\"form-label\">Experience</label>\n                    <input type=\"number\" className=\"form-control\" value={formik.values.experience} onChange={formik.handleChange} id=\"experience\" placeholder=\"Enter experience in Years\" />\n                    {formik.errors.experience ? <div className=\"error\">{formik.errors.experience}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"fees\" className=\"form-label\">Fees</label>\n                    <input type=\"number\" className=\"form-control\" value={formik.values.fees} onChange={formik.handleChange} id=\"fees\" placeholder=\"Enter fees in rupees\" />\n                    {formik.errors.fees ? <div className=\"error\">{formik.errors.fees}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"speciality\" className=\"form-label\">Speciality</label>\n                    <select className=\"form-select\" id=\"speciality\" value={formik.values.speciality} onChange={formik.handleChange} aria-label=\"Default select example\">\n                    <option value=\"none\">Select Specialist</option>\n                        {\n                            rows.map((data,key)=>{\n                                return(\n                                    <Fragment key={key}>\n                                    <option value={myspecialist[key]}>{myspecialist[key]}</option>\n                                    </Fragment>\n                                )\n\n\n                            })\n                        }\n                        \n                    </select>\n                    {formik.errors.speciality ? <div className=\"error\">{formik.errors.speciality}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"qualification\" className=\"form-label\">Qualification</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.qualification} onChange={formik.handleChange} id=\"qualification\" placeholder=\"MBBS\" />\n                    {formik.errors.qualification ? <div className=\"error\">{formik.errors.qualification}</div> : \"\"}\n                </div>\n\n\n                <div className=\"mb-6 p-2 register_button\">\n\n                    <button type=\"submit\" className=\"btn btn-success\">Next</button>\n\n                </div>\n            </form>\n            <button onClick={() => submit(0)} >Back</button>\n            <button className=\"btn btn-success back\" onClick={() => back_slots(false)}>Search Doctor</button>\n        </div>\n    );\n}\n\nexport default EducationForm;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/doc_review.js",["442"],"import React, { useState } from 'react'\nimport \"./../../../index.css\"\nimport axios from 'axios';\n\n\n\nfunction Review({ submit, values, slots_data,back_slots }) {\n\n\n\n    let monday_slots = slots_data[0]\n    let tuesday_slots = slots_data[1]\n    let wednesday_slots = slots_data[2]\n    let thursday_slots = slots_data[3]\n    let friday_slots = slots_data[4]\n    let saturday_slots = slots_data[5]\n    let sunday_slots = slots_data[6]\n\n    let monday_database = [\"\",\"\"]\n    let tuesday_database = [\"\",\"\"]\n    let wednesday_database = [\"\",\"\"]\n    let thursday_database = [\"\",\"\"]\n    let friday_database = [\"\",\"\"]\n    let saturday_database = [\"\",\"\"]\n    let sunday_database = [\"\",\"\"]\n\n\n    function get_mapped_data(data) {\n        let i = 1;\n        let rows = []\n        while (i <= parseInt(data)) {\n            rows.push(i)\n            i++\n        }\n        return rows\n    }\n\n\n\n\n\n\n    function onSubmit() {\n\n        \n        \n            let starting =  `${monday_database[0]},${tuesday_database[0]},${wednesday_database[0]},${thursday_database[0]},${friday_database[0]},${saturday_database[0]},${sunday_database[0]}`\n            let ending = `${monday_database[1]},${tuesday_database[1]},${wednesday_database[1]},${thursday_database[1]},${friday_database[1]},${saturday_database[1]},${sunday_database[1]}`\n\n        const registration_data = {\n            name: values[0].name,\n            email: values[0].email,\n            password: values[0].password,\n            city: values[0].city,\n            phone: values[0].phone,\n            address: values[0].address,\n            category: \"doctor\",\n            // clinic: values[1].clinic,\n            fees: values[1].fees,\n            experience: values[1].experience,\n            qualification: values[1].qualification,\n            speciality: values[1].speciality,\n            start: starting,\n            end: ending,\n            hospital_id: sessionStorage.getItem(\"hospital_id\")\n        }\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n\n\n\n        axios.post(\n            'http://localhost/back_end/hos_doc_signup.php', registration_data, headers\n        ).then(\n            res => {\n                \n                    alert(res.data.id)\n                    back_slots(false)\n                \n\n                \n                \n               \n            }\n        );\n\n\n    }\n\n\n\n    return (\n        <div className=\"review_form\">\n            <h2>Review</h2>\n            <br></br>\n            <h4>Registration Data</h4>\n            <p>{values[0].name}</p>\n            <p>{values[0].email}</p>\n            <p>{values[0].password}</p>\n            <p>{values[0].city}</p>\n            <p>0{values[0].phone}</p>\n            <p>{values[0].address}</p>\n            <h4>Educational Data</h4>\n            {/* <p>{values[1].clinic}</p> */}\n            <p>{values[1].fees}</p>\n            <p>{values[1].experience}</p>\n            <p>{values[1].qualification}</p>\n            <p>{values[1].speciality}</p>\n\n\n            {/*  ------------------------------------MONDAY----------------------------- */}\n            <h4>Slots</h4>\n            <b>Monday</b>\n            {\n                monday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(monday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = monday_slots.tickets[key].email.split(\":\")\n                        console.log(start_data)\n                        const end_data = monday_slots.tickets[key].name.split(\":\")\n                        console.log(end_data)\n                        let start_time = \"\"\n                        let end_time = \"\"\n\n                    \n\n\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        monday_database[0] =monday_database[0].concat(end_time+\"-\")\n                        monday_database[1]=monday_database[1].concat(start_time+\"-\")\n\n                    \n                        \n                        \n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    \n                    get_mapped_data(1).map((data,key)=>{\n                        monday_database[0] = \"Holiday\"\n                        monday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Tuesday----------------------------- */}\n\n            <h5>Tuesday</h5>\n            {\n                tuesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(tuesday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = tuesday_slots.tickets[key].email.split(\":\")\n                        const end_data = tuesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n                        \n\n                        tuesday_database[0] =tuesday_database[0].concat(end_time+\"-\")\n                        tuesday_database[1]=tuesday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        tuesday_database[0] = \"Holiday\"\n                        tuesday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Wednesday----------------------------- */}\n\n             <h5>Wednesday</h5>\n            {\n                wednesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(wednesday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = wednesday_slots.tickets[key].email.split(\":\")\n                        const end_data = wednesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n                        \n                        wednesday_database[0] =wednesday_database[0].concat(end_time+\"-\")\n                        wednesday_database[1]=wednesday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        wednesday_database[0] = \"Holiday\"\n                        wednesday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n\n\n             {/*  ------------------------------------Thursday----------------------------- */}\n\n             <h5>Thursday</h5>\n            {\n                thursday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(thursday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = thursday_slots.tickets[key].email.split(\":\")\n                        const end_data = thursday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        thursday_database[0] = thursday_database[0].concat(end_time+\"-\")\n                        thursday_database[1]= thursday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        thursday_database[0] = \"Holiday\"\n                        thursday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Friday----------------------------- */}\n\n             <h5>Friday</h5>\n            {\n                friday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(friday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = friday_slots.tickets[key].email.split(\":\")\n                        const end_data = friday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n\n                        friday_database[0] =friday_database[0].concat(end_time+\"-\")\n                        friday_database[1]=friday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        friday_database[0] = \"Holiday\"\n                        friday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Saturday----------------------------- */}\n\n             <h5>Saturday</h5>\n            {\n                saturday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(saturday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = saturday_slots.tickets[key].email.split(\":\")\n                        const end_data = saturday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n                        \n                        saturday_database[0] =saturday_database[0].concat(end_time+\"-\")\n                        saturday_database[1]=saturday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        saturday_database[0] = \"Holiday\"\n                        saturday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Sunday----------------------------- */}\n\n             <h5>Sunday</h5>\n            {\n                sunday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(sunday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = sunday_slots.tickets[key].email.split(\":\")\n                        const end_data = sunday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n\n                        sunday_database[0] = sunday_database[0].concat(end_time+\"-\")\n                        sunday_database[1]= sunday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        sunday_database[0] = \"Holiday\"\n                        sunday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            <button className=\"btn btn-secondary\" onClick={() => submit(2)}>Back</button>\n            <button className=\"btn btn-primary\" onClick={onSubmit}>Submit</button>\n            <button className=\"btn btn-success back\" onClick={() => back_slots(false)}>Search Doctor</button>\n\n\n\n\n        </div>\n    );\n}\n\nexport default Review;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/doctor_signup/doc_slots.js",["443"],"import React, { Fragment, useState } from 'react'\nimport \"./../../../index.css\"\nimport DaySlots from './../../doctors/day'\n\n\nfunction DocSlots({submit,set_values,back_slots}) {\n\n    const [mondaySlots,setmondaySlots] = useState([])\n    const [tuesdaySlots,settuesdaySlots] = useState([])\n    const [wednesdaySlots,setwednesdaySlots] = useState([])\n    const [thursdaySlots,setthursdaySlots] = useState([])\n    const [fridaySlots,setfridaySlots] = useState([])\n    const [saturdaySlots,setsaturdaySlots] = useState([])\n    const [sundaySlots,setsundaySlots] = useState([])\n\n\n    const [mondaycheck,setmondaycheck] = useState(false)\n    const [tuesdaycheck,settuesdaycheck] = useState(false)\n    const [wednesdaycheck,setwednesdaycheck] = useState(false)\n    const [thursdaycheck,setthursdaycheck] = useState(false)\n    const [fridaycheck,setfridaycheck] = useState(false)\n    const [saturdaycheck,setsaturdaycheck] = useState(false)\n    const [sundaycheck,setsundaycheck] = useState(false)\n\n\n    function onSubmit() {\n        if (mondaycheck && tuesdaycheck && wednesdaycheck && thursdaycheck && fridaycheck && saturdaycheck && sundaycheck) {\n\n\n\n            let mon = {\"numberOfTickets\": String(mondaySlots['tickets'].length) ,\"tickets\": mondaySlots['tickets']}\n            let tues = {\"numberOfTickets\": String(tuesdaySlots['tickets'].length) ,\"tickets\": tuesdaySlots['tickets']}\n            let wed = {\"numberOfTickets\": String(wednesdaySlots['tickets'].length) ,\"tickets\": wednesdaySlots['tickets']}\n            let thurs = {\"numberOfTickets\": String(thursdaySlots['tickets'].length) ,\"tickets\": thursdaySlots['tickets']}\n            let fri = {\"numberOfTickets\": String(fridaySlots['tickets'].length) ,\"tickets\": fridaySlots['tickets']}\n            let satur = {\"numberOfTickets\": String(saturdaySlots['tickets'].length) ,\"tickets\": saturdaySlots['tickets']}\n            let sun = {\"numberOfTickets\": String(sundaySlots['tickets'].length),\"tickets\": sundaySlots['tickets']}\n\n            \n        \n\n            set_values([mon,tues,wed,thurs,fri,satur,sun])\n            submit(3)\n        }\n        else{\n            alert(\"Complete your slots!\")\n        }\n    }\n\n\n    return (\n        <div>\n\n            <h3 className=\"title\">Make Slots</h3>\n        \n            <DaySlots setDay={setmondaySlots} day=\"Monday\" check={setmondaycheck}/>\n            <DaySlots setDay={settuesdaySlots} day=\"Tuesday\" check={settuesdaycheck}/>\n            <DaySlots setDay={setwednesdaySlots} day=\"Wednesday\" check={setwednesdaycheck}/>\n            <DaySlots setDay={setthursdaySlots} day=\"Thursday\" check={setthursdaycheck}/>\n            <DaySlots setDay={setfridaySlots} day=\"Friday\" check={setfridaycheck}/>\n            <DaySlots setDay={setsaturdaySlots} day=\"Saturday\" check={setsaturdaycheck}/>\n            <DaySlots setDay={setsundaySlots} day=\"Sunday\" check={setsundaycheck}/>\n\n            <button onClick={onSubmit}>Next</button>\n            <button onClick={()=>submit(1)}>Back</button>\n            <button className=\"btn btn-success back\" onClick={() => back_slots(false)}>Search Doctor</button>\n\n\n            \n        </div>\n\n\n    )\n\n\n}\n\nexport default DocSlots;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/show_hospital_data/my_doctors.js",["444","445","446","447","448","449","450","451"],"import React, { useState, useEffect } from 'react'\nimport { Fragment } from 'react';\nimport { get_hospital_doctors } from './../../api_requests/login'\nimport Navbar from './../../navbar'\nimport './../../../index.css'\n\n \n\nfunction ShowHosDoctors() {\n\n    let [doctors_record, setdoctors_record] = useState([])\n    let [changepage,setchangepage] = useState(false)\n    let [index,setindex] = useState()\n    let [doctor_key,setdoctorkey] = useState()\n    let [max_appointments,set_max_appointments] = useState([])\n\n    let check_doctors = true\n    let id_user = 0\n\n    if(sessionStorage.getItem(\"hospital_id\"))\n    {\n        id_user = sessionStorage.getItem(\"hospital_id\")\n    }\n    else{\n        id_user = false\n    }\n\n\n\n    let i = 1;\n    let rows = []\n\n\n\n    // useEffect(()=>{\n\n    //     async function max_appoints(id_user){\n\n    //         let data = await get_max_user_appoints(id_user)\n    //         set_max_appointments(data)\n\n    //     }\n\n    //     max_appoints(id_user)\n\n    // }, [id_user]);\n\n\n    // console.log(id_user)\n    // console.log(max_appointments)\n\n\n\n\n\n\n\n\n\n\n    useEffect(() => {\n        async function data_show(value) {\n            let real_data = await get_hospital_doctors(value);\n\n            setdoctors_record(real_data);\n        }\n        data_show(id_user);\n    }, [id_user]);\n\n    if (!doctors_record) {\n        return (\n            <h1>Loading!</h1>\n        )\n    }\n    else {\n        if (doctors_record['counter'] > 0) {\n            while (i <= doctors_record['counter']) {\n                rows.push(i)\n                i++\n            }\n        }\n        else {\n            check_doctors = false\n        }\n    }\n\n\n\n\n    //---------------get slots----------------\n\n    function get_array_of_slots(day,starting_time,ending_time) {\n\n        let my_data = []\n        let start = []\n        let end = []\n\n        //  START SLOTS---------------------------------\n\n        let number_of_slots_per_day_start = 0;\n        let slots_of_weeks = starting_time.split(\",\")\n        if (slots_of_weeks[day] !== \"Holiday\") {\n            number_of_slots_per_day_start = slots_of_weeks[day].split(\"-\")\n            number_of_slots_per_day_start.pop()\n            start.push(number_of_slots_per_day_start)\n\n            //     END SLOTS------------------------\n\n            let slots_end = ending_time.split(\",\")\n\n            let a = slots_end[day].split(\"-\")\n            a.pop()\n            end.push(a)\n\n            for (let i = 0; i < start[0].length; i++) {\n                my_data.push(start[0][i] + \" - \"+end[0][i])\n                \n            }\n            let rows1 = []\n            let i = 0\n\n            while (i < my_data.length) {\n                rows1.push(i)\n                i++\n            }\n\n            return(\n                <Fragment>\n                {\n                    rows1.map((data,key)=>{\n                        return(\n                            <div key={key}>\n                                <b>Shift {data+1}</b>\n                                <p>{my_data[data]}</p>\n                            </div>\n                        )\n                        \n                    })\n                }\n                </Fragment>\n                \n            )\n            \n\n        }\n\n        else {\n            return <p>Holiday</p>\n        }\n\n\n\n    }\n\n\n\n\n\n\n\n\n    return (\n\n        <Fragment>\n            <Navbar/>\n            <div>\n\n            <h3 align=\"center\" className=\"title\">Doctors</h3>\n            </div>\n\n            <div className=\"review_form\">\n                <p><b>Search by name</b></p>\n            {\n                check_doctors ? \n                rows.map((data,key)=>{\n                    return(\n                        <div key={key}>\n                            <a href={\"#\"+doctors_record.email[key]}>{doctors_record.name[key]}</a>\n                        </div>\n                    )\n                })\n\n                :\n                \"\"\n            }\n            </div>\n\n\n\n\n\n\n\n            {\n                check_doctors ?\n\n                    rows.map((data, key) => {\n                        return (\n                            <div className=\"review_form\" key={key} id={doctors_record.email[key]}>\n                                <div className=\"container\">\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <b>{doctors_record.name[key]}</b>\n                                        </div>\n                                        <div className=\"col\">\n                                            <b>{doctors_record.email[key]}</b>\n                                        </div>\n                                    </div>\n                                    <hr></hr>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            +92 {doctors_record.phone[key]}\n                                        </div>\n                                        <div className=\"col\">\n                                            {doctors_record.address[key]}\n                                        </div>\n                                        <div className=\"col\">\n                                            <b>{doctors_record.city[key]}</b>\n                                        </div>\n                                    </div>\n                                    <hr></hr>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <b>{sessionStorage.getItem(\"hospital_name\")}</b>\n                                        </div>\n                                    </div>\n                                    <hr></hr>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            {doctors_record.experience[key]} experience\n                                        </div>\n                                        <div className=\"col\">\n                                            {doctors_record.fees[key]} fee\n                                        </div>\n                                        <div className=\"col\">\n                                            <b>speciality:</b> <br></br>{doctors_record.speciality[key]}\n                                        </div>\n                                    </div>\n                                    <hr></hr>\n                                    <div className=\"row\" id=\"dayss\">\n                                        <div className=\"col\">\n                                            <b><p>Monday</p></b>\n                                        </div>\n                                        <div className=\"col\">\n                                            <b><p>Tuesday</p></b>\n                                        </div>\n                                        <div className=\"col\">\n                                            <b><p>Wednesday</p></b>\n                                        </div>\n                                        <div className=\"col\">\n                                            <b><p>Thursday</p></b>\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                        { get_array_of_slots(0,doctors_record.start[key],doctors_record.end[key])}\n                                            \n                                        </div>\n                                        <div className=\"col\">\n                                        {get_array_of_slots(1,doctors_record.start[key],doctors_record.end[key])}\n                                        </div>\n                                        <div className=\"col\">\n                                        {get_array_of_slots(2,doctors_record.start[key],doctors_record.end[key])}\n                                        </div>\n                                        <div className=\"col\">\n                                        {get_array_of_slots(3,doctors_record.start[key],doctors_record.end[key])}\n                                        </div>\n                                    </div>\n\n                                    {/*Friday - sunday */}\n\n                                    <div className=\"row\" id=\"dayss\">\n                                        <div className=\"col\">\n                                            <b><p>Friday</p></b>\n                                        </div>\n                                        <div className=\"col\">\n                                            <b><p>Saturday</p></b>\n                                        </div>\n                                        <div className=\"col\">\n                                            <b><p>Sunday</p></b>\n                                        </div>\n                                        \n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                        { get_array_of_slots(4,doctors_record.start[key],doctors_record.end[key])}\n                                            \n                                        </div>\n                                        <div className=\"col\">\n                                        {get_array_of_slots(5,doctors_record.start[key],doctors_record.end[key])}\n                                        </div>\n                                        <div className=\"col\">\n                                        {get_array_of_slots(6,doctors_record.start[key],doctors_record.end[key])}\n                                        </div>\n                                    </div>\n                                </div>\n\n\n                                \n\n\n\n\n\n                            </div>\n                        )\n\n                    })\n                    :\n                    <div className=\"review_form\">\n                        <h1>No doctors yet!</h1>\n                    </div>\n            }\n\n        </Fragment  >\n\n    )\n\n}\n\nexport default ShowHosDoctors;","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/all_users.js",["452","453","454"],"import React, { useState, Fragment } from 'react'\nimport Navbar from './../navbar'\nimport \"./../../index.css\"\n\nimport DoctorExistStepper from './change_slots/stepper'\n\nimport SignupForm from './change_doctors/stepper'\nimport { date } from 'yup/lib/locale'\n// import {get_user_appoinments,cancel_appoinments} from './../api_requests/login'\n\n\nfunction AllUers({flagg = false}) {\n\n\n\n\n\n    let [change_page, set_change_page] = useState(flagg)\n\n    \n  \n\n\n    let i = 0;\n    let rows = []\n\n\n    while (i < sessionStorage.getItem(\"counter\")) {\n        rows.push(i)\n        i++\n    }\n\n\n\n    function get_array_of_slots(day, starting_time, ending_time) {\n\n    \n        let my_data = []\n        let start = []\n        let end = []\n\n        //  START SLOTS---------------------------------\n\n        let number_of_slots_per_day_start = 0;\n        let slots_of_weeks = starting_time.split(\",\")\n        if (slots_of_weeks[day] !== \"Holiday\") {\n            number_of_slots_per_day_start = slots_of_weeks[day].split(\"-\")\n            number_of_slots_per_day_start.pop()\n            start.push(number_of_slots_per_day_start)\n\n            //     END SLOTS------------------------\n\n            let slots_end = ending_time.split(\",\")\n\n            let a = slots_end[day].split(\"-\")\n            a.pop()\n            end.push(a)\n\n            for (let i = 0; i < start[0].length; i++) {\n                my_data.push(start[0][i] + \" - \" + end[0][i])\n\n            }\n            let rows1 = []\n            let i = 0\n\n            while (i < my_data.length) {\n                rows1.push(i)\n                i++\n            }\n\n            return (\n                <Fragment>\n                    {\n                        rows1.map((data, key) => {\n                            return (\n                                <div key={key}>\n                                    <b>Shift {data + 1}</b>\n                                    <p>{my_data[data]}</p>\n                                </div>\n                            )\n\n                        })\n                    }\n                </Fragment>\n\n            )\n\n\n        }\n\n        else {\n            return <p>Holiday</p>\n        }\n\n\n\n    }\n\n\n    \n\n\n    function get_string(start) {\n        let start_array = []\n\n        for (let j = 0; j < start.length; j++) {\n\n            if (j % 7 == 0) {\n                start_array.push(start[j])\n            }\n            else {\n                start_array[start_array.length - 1] = start_array[start_array.length - 1] + \",\" + start[j]\n            }\n\n\n        }\n\n\n        return start_array\n    }\n\n\n    let start = sessionStorage.getItem(\"start\").split(\",\")\n    let end = sessionStorage.getItem(\"end\").split(\",\")\n\n    let start_array = get_string(start)\n    let end_array = get_string(end)\n    \n\n    let hospital_names = sessionStorage.getItem(\"hospital_names\").split(\",\")\n\n\n\n\n\n    function change_it(flag)\n    {\n        set_change_page(flag)\n    }\n\n    if(change_page)\n    {\n        return(<DoctorExistStepper back_slots={change_it} doctor_id={sessionStorage.getItem(\"doctor_id\")}/>)\n    }\n\n  \n\n\n\n\n\n\n\n\n\n    return (\n        <div>\n            <Navbar />\n            <h1 className=\"title\">My Accounts</h1>\n\n\n\n            {\n\n\n                rows.map((data, key) => {\n                    return (\n                        <div className=\"review_form\" key={key}>\n                            <div className=\"container\">\n                                <div className=\"row\">\n\n                                    {\n                                        sessionStorage.getItem(\"clinic\") !== \"nothing\" && key === 0 ?\n                                            <div className=\"col\">\n                                                <b>{sessionStorage.getItem(\"clinic\")}</b>\n                                            </div>\n\n                                            :\n                                            \n                                            <div className=\"col\">\n                                                {\n                                                    sessionStorage.getItem(\"clinic\") !== \"nothing\" ?\n                                                    <b>{hospital_names[data - 1]}</b>\n                                                    :\n                                                   <b>{hospital_names[key]}</b>\n                                                }\n\n\n                                            </div>\n                                    }\n\n\n                                    <div className=\"col\">\n                                        <b>{sessionStorage.getItem(\"email\")}</b>\n                                    </div>\n                                </div>\n                                <hr></hr>\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        +92 {sessionStorage.getItem(\"phone\")}\n                                    </div>\n                                    <div className=\"col\">\n                                        {sessionStorage.getItem(\"address\")}\n                                    </div>\n                                    <div className=\"col\">\n                                        <b>{sessionStorage.getItem(\"city\")}</b>\n                                    </div>\n                                    \n                                </div>\n                                <hr></hr>\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        {sessionStorage.getItem(\"experience\")} experience\n                                        </div>\n                                    <div className=\"col\">\n                                        {sessionStorage.getItem(\"fees\")} fee\n                                        </div>\n                                    <div className=\"col\">\n                                        <b>speciality:</b> <br></br>{sessionStorage.getItem(\"speciality\")}\n                                    </div>\n                                </div>\n                                <hr></hr>\n                                <div className=\"row\" id=\"dayss\">\n                                    <div className=\"col\">\n                                        <b><p>Monday</p></b>\n                                    </div>\n                                    <div className=\"col\">\n                                        <b><p>Tuesday</p></b>\n                                    </div>\n                                    <div className=\"col\">\n                                        <b><p>Wednesday</p></b>\n                                    </div>\n                                    <div className=\"col\">\n                                        <b><p>Thursday</p></b>\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        {get_array_of_slots(0, start_array[key], end_array[key])}\n\n                                    </div>\n                                    <div className=\"col\">\n                                        {get_array_of_slots(1, start_array[key], end_array[key])}\n                                    </div>\n                                    <div className=\"col\">\n                                        {get_array_of_slots(2, start_array[key], end_array[key])}\n                                    </div>\n                                    <div className=\"col\">\n                                        {get_array_of_slots(3, start_array[key], end_array[key])}\n                                    </div>\n                                </div>\n\n                                {/*Friday - sunday */}\n\n                                <div className=\"row\" id=\"dayss\">\n                                    <div className=\"col\">\n                                        <b><p>Friday</p></b>\n                                    </div>\n                                    <div className=\"col\">\n                                        <b><p>Saturday</p></b>\n                                    </div>\n                                    <div className=\"col\">\n                                        <b><p>Sunday</p></b>\n                                    </div>\n\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        {get_array_of_slots(4, start_array[key], end_array[key])}\n\n                                    </div>\n                                    <div className=\"col\">\n                                        {get_array_of_slots(5, start_array[key], end_array[key])}\n                                    </div>\n                                    <div className=\"col\">\n                                        {get_array_of_slots(6, start_array[key], end_array[key])}\n                                    </div>\n                                   \n                                </div>\n                            </div>\n\n\n                            {\n                                        sessionStorage.getItem(\"clinic\") !== \"nothing\" && key === 0 ?\n                                                <div className=\"row\">\n                                                 <div className=\"col\">\n                                                     <button className=\"btn btn-success\" onClick={()=>change_it(true)}>Change Slots</button>\n                                                 </div>\n                                               \n                                         </div>                                       \n\n                                            :\n                                            \"\"\n                                    }\n\n\n                            \n\n\n\n\n\n                        </div>\n                    )\n\n                })\n\n\n\n            }\n\n\n\n\n\n\n\n        </div>\n    );\n}\n\nexport default AllUers;","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/change_doctors/stepper.js",["455"],"/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/change_slots/stepper.js",["456","457","458","459"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nimport Navbar from './../../navbar'\nimport DocSlotsAlready from './add_doctor_slots'\nimport ReviewAlready from './add_doctor_review'\nimport { Fragment } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\n\n\nfunction getSteps() {\n    return ['Change Slots', 'Review'];\n}\n\nfunction getStepContent(stepIndex, setStep,set_slots_timing,slots_timing,back_slots,doctor_id) {\n    switch (stepIndex) {\n        case 0:\n            return <DocSlotsAlready submit={setStep} set_data = {set_slots_timing} back_slotss = {back_slots}/>;\n        case 1:\n            return <ReviewAlready submit={setStep} slots_data = {slots_timing} back_to_search = {back_slots} doctor_id = {doctor_id}/>;\n\n\n    }\n}\n\nexport default function DoctorExistStepper({back_slots,doctor_id}) {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n\n    let [slots_timing,set_slots_timing] = useState([])\n\n\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n\n\n    return (\n        <Fragment>\n            <Navbar />\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                {\n                    getStepContent(activeStep, setActiveStep, set_slots_timing, slots_timing,back_slots,doctor_id)\n                }\n\n\n\n            </div>\n        </Fragment>\n    );\n}\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/change_slots/add_doctor_slots.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/doctors/change_slots/add_doctor_review.js",["460"],"import React, { useState } from 'react'\nimport \"./../../../index.css\"\nimport axios from 'axios';\n\n\n\nfunction ReviewAlready({ submit, slots_data, back_to_search, doctor_id}) {\n\n\n\n    let monday_slots = slots_data[0]\n    let tuesday_slots = slots_data[1]\n    let wednesday_slots = slots_data[2]\n    let thursday_slots = slots_data[3]\n    let friday_slots = slots_data[4]\n    let saturday_slots = slots_data[5]\n    let sunday_slots = slots_data[6]\n\n    let monday_database = [\"\", \"\"]\n    let tuesday_database = [\"\", \"\"]\n    let wednesday_database = [\"\", \"\"]\n    let thursday_database = [\"\", \"\"]\n    let friday_database = [\"\", \"\"]\n    let saturday_database = [\"\", \"\"]\n    let sunday_database = [\"\", \"\"]\n\n\n    function get_mapped_data(data) {\n        let i = 1;\n        let rows = []\n        while (i <= parseInt(data)) {\n            rows.push(i)\n            i++\n        }\n        return rows\n    }\n\n\n\n    // console.log(doctor_id)\n    // console.log(sessionStorage.getItem(\"hospital_id\"))\n\n\n\n    function onSubmit() {\n\n\n\n        let starting = `${monday_database[0]},${tuesday_database[0]},${wednesday_database[0]},${thursday_database[0]},${friday_database[0]},${saturday_database[0]},${sunday_database[0]}`\n        let ending = `${monday_database[1]},${tuesday_database[1]},${wednesday_database[1]},${thursday_database[1]},${friday_database[1]},${saturday_database[1]},${sunday_database[1]}`\n\n        const registration_data = {\n            doctor_id: doctor_id,\n            start: starting,\n            end: ending\n        }\n\n\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n\n\n\n        axios.post(\n            'http://localhost/back_end/update_doctor_slots.php', registration_data, headers\n        ).then(\n            res => {\n\n                if(res.data.signal === 1)\n                {\n                    alert(res.data.id)\n                    back_to_search(false)\n\n                }\n                else{\n                    alert(res.data.id)\n                    back_to_search(false)\n                }\n\n\n\n\n            }\n        );\n\n\n    }\n\n\n\n    return (\n        <div className=\"review_form\">\n            <h2>Review</h2>\n            <br></br>\n\n            {/*  ------------------------------------MONDAY----------------------------- */}\n            <h4>Slots</h4>\n            <b>Monday</b>\n            {\n                monday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(monday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = monday_slots.tickets[key].email.split(\":\")\n                        console.log(start_data)\n                        const end_data = monday_slots.tickets[key].name.split(\":\")\n                        console.log(end_data)\n                        let start_time = \"\"\n                        let end_time = \"\"\n\n\n\n\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        monday_database[0] = monday_database[0].concat(end_time + \"-\")\n                        monday_database[1] = monday_database[1].concat(start_time + \"-\")\n\n\n\n\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n\n                    get_mapped_data(1).map((data, key) => {\n                        monday_database[0] = \"Holiday\"\n                        monday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Tuesday----------------------------- */}\n\n            <h5>Tuesday</h5>\n            {\n                tuesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(tuesday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = tuesday_slots.tickets[key].email.split(\":\")\n                        const end_data = tuesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n\n                        tuesday_database[0] = tuesday_database[0].concat(end_time + \"-\")\n                        tuesday_database[1] = tuesday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        tuesday_database[0] = \"Holiday\"\n                        tuesday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Wednesday----------------------------- */}\n\n            <h5>Wednesday</h5>\n            {\n                wednesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(wednesday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = wednesday_slots.tickets[key].email.split(\":\")\n                        const end_data = wednesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        wednesday_database[0] = wednesday_database[0].concat(end_time + \"-\")\n                        wednesday_database[1] = wednesday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        wednesday_database[0] = \"Holiday\"\n                        wednesday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n\n\n            {/*  ------------------------------------Thursday----------------------------- */}\n\n            <h5>Thursday</h5>\n            {\n                thursday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(thursday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = thursday_slots.tickets[key].email.split(\":\")\n                        const end_data = thursday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        thursday_database[0] = thursday_database[0].concat(end_time + \"-\")\n                        thursday_database[1] = thursday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        thursday_database[0] = \"Holiday\"\n                        thursday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Friday----------------------------- */}\n\n            <h5>Friday</h5>\n            {\n                friday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(friday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = friday_slots.tickets[key].email.split(\":\")\n                        const end_data = friday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        friday_database[0] = friday_database[0].concat(end_time + \"-\")\n                        friday_database[1] = friday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        friday_database[0] = \"Holiday\"\n                        friday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Saturday----------------------------- */}\n\n            <h5>Saturday</h5>\n            {\n                saturday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(saturday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = saturday_slots.tickets[key].email.split(\":\")\n                        const end_data = saturday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        saturday_database[0] = saturday_database[0].concat(end_time + \"-\")\n                        saturday_database[1] = saturday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        saturday_database[0] = \"Holiday\"\n                        saturday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Sunday----------------------------- */}\n\n            <h5>Sunday</h5>\n            {\n                sunday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(sunday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = sunday_slots.tickets[key].email.split(\":\")\n                        const end_data = sunday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        sunday_database[0] = sunday_database[0].concat(end_time + \"-\")\n                        sunday_database[1] = sunday_database[1].concat(start_time + \"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data, key) => {\n                        sunday_database[0] = \"Holiday\"\n                        sunday_database[1] = \"Holiday\"\n                        return (\n                            <div key={key}>\n                                <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <button className=\"btn btn-danger\" onClick={() => submit(0)}>Back</button>\n                </div>\n                <div className=\"col\">\n                    <button className=\"btn btn-secondary\" onClick={onSubmit}>Submit</button>\n                </div>\n                <div className=\"col\">\n\n                    <button className=\"btn btn-success\" onClick={() => back_to_search(false)}>Back to Accounts</button>\n                </div>\n\n            </div>\n\n\n\n\n\n\n\n        </div>\n    );\n}\n\nexport default ReviewAlready;","/home/nadeem/Desktop/react_apps/docforyou/src/components/hospitals/show_hospital_data/show_appointments_detail.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/sign_in.js",["461"],"import React, { useState } from 'react'\nimport { useFormik } from \"formik\";\nimport { Link,Redirect } from 'react-router-dom'\nimport * as yup from \"yup\";\nimport \"./../../index.css\"\nimport Home from './../home'\nimport axios from 'axios';\nimport Navbar from './../navbar'\n\nfunction Lab_Sign() {\n\n    let [check, setcheck] = useState(false)\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\"\n        },\n        onSubmit: (values) => {\n            var headers = {\n                \"Content-Type\": \"application/json;charset=UTF-8\",\n            }\n\n\n\n\n            axios.post(\n                'http://localhost/back_end/lab_signin.php', values, headers\n            ).then(\n                res => {\n                    if (res.data.signal === 1) {\n                        sessionStorage.setItem(\"email\", res.data.email)\n                        sessionStorage.setItem(\"lab_id\", res.data.user_id)\n                        sessionStorage.setItem(\"name\", res.data.name)\n                        sessionStorage.setItem(\"city\", res.data.city)\n                        sessionStorage.setItem(\"address\", res.data.address)\n                        sessionStorage.setItem(\"phone\", res.data.phone)\n\n                        setcheck(true)\n                        alert(res.data.id)\n                    }\n                    else\n                        alert(res.data.id)\n                }\n            );\n\n        },\n        validationSchema: yup.object({\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            password: yup.string().required(\"This field is required!\")\n\n        })\n    })\n\n\n    if (check === true) {\n        return (\n            <Redirect to=\"/\" />\n        )\n    }\n\n\n\n    return (\n        <div>\n            <Navbar />\n            <div className=\"doctor_form\"  >\n                <form onSubmit={formik.handleSubmit}>\n                    <h3 align='center'>Lab Login</h3>\n\n                    <div className=\"mb-2 p-2\">\n                        <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                        <input type=\"email\" className=\"form-control\" values={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                        {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                    </div>\n\n                    <div className=\"mb-2 p-2\">\n                        <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                        <input type=\"password\" className=\"form-control\" values={formik.values.password} onChange={formik.handleChange} id=\"password\" placeholder=\"Enter password\" />\n                        {formik.errors.password ? <div className=\"error\">{formik.errors.password}</div> : \"\"}\n                    </div>\n\n                    <div className=\"row mb-2 p-2\">\n                        <div className=\"col-lg-6 col-sm-6\">\n                            <button type=\"submit\" className=\"btn btn-success\">Login</button>\n                        </div>\n                        <div className=\"col-lg-6 col-sm-6 pt-2\">\n                            Create Account? <Link to=\"/lab_register\">Sign up</Link>\n                        </div>\n                    </div>\n\n                </form>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Lab_Sign;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/stepper.js",["462","463","464","465"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nimport Navbar from './../navbar'\nimport SignupForm from './doc_basic'\nimport EducationForm from './doc_education'\nimport Review from './doc_review'\nimport DocSlots from './doc_slots'\nimport { Fragment } from 'react';\nimport Lab from './../lab'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    backButton: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\n\n\nfunction getSteps() {\n    return ['Register Data', 'Lab Info', 'Slots', 'Review'];\n}\n\nfunction getStepContent(stepIndex, setStep, setformValues, formValues, setformValuesEducation, formValuesEducation, doctor_slots, set_doctor_slots) {\n    switch (stepIndex) {\n        case 0:\n            return <SignupForm submit={setStep} preValues={formValues} setformValues={setformValues}/>;\n        case 1:\n            return <EducationForm submit={setStep} setformValuesEducation={setformValuesEducation}/>;\n        case 2:\n            return <DocSlots submit={setStep} set_values={set_doctor_slots}/>;\n        case 3:\n            return <Review submit={setStep} values={[formValues, formValuesEducation]} slots_data={doctor_slots}/>;\n\n\n    }\n}\n\nexport default function LabStepper() {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [doctor_slots, set_doctor_slots] = React.useState([]);\n    const [formValues, setformValues] = React.useState({\n        name: \"\",\n        email: \"\",\n        city: \"\",\n        phone: \"\",\n        address: \"\"\n    })\n\n    const [formValuesEducation, setformValuesEducation] = React.useState({\n        speciality: \"\"\n    })\n\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n\n    if (activeStep === 4) {\n        return (\n            <Lab />\n        )\n    }\n\n    return (\n        <Fragment>\n            <Navbar />\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep} alternativeLabel>\n                    {steps.map((label, index) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                        </Step>\n                    ))}\n                </Stepper>\n                {\n                    getStepContent(activeStep, setActiveStep, setformValues, formValues, setformValuesEducation, formValuesEducation, doctor_slots, set_doctor_slots)\n                }\n\n\n\n            </div>\n        </Fragment>\n    );\n}\n","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/doc_basic.js",["466","467","468"],"import React, { Fragment } from 'react'\nimport { useFormik,Field } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../../index.css\"\nimport axios from 'axios';\n\nfunction SignupForm({submit,setformValues,preValues}) {\n\n    const formik = useFormik({\n        initialValues: {\n            name: preValues.name,\n            email: preValues.email,\n            password: preValues.password,\n            city: preValues.city,\n            phone: preValues.phone,\n            address: preValues.address,\n        },\n        onSubmit: values => {\n            setformValues({...values})\n            submit(1)\n        \n\n        },\n        validationSchema: yup.object({\n            name: yup.string().matches(\"^[a-zA-Z ]{1,}[^0-9]$\", \"Invalid name, only use text\").required(\"This field is required!\"),\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            password: yup.string().min(6, \"Must be greater than 5 digits\").max(10, \"Must be less than 11 digits\").required(\"This field is required!\"),\n            city: yup.string().matches(\"^[a-zA-Z]{3,}$\", \"Only use text must be greater than 3 words\").required(\"This field is required!\"),\n            phone: yup.string().matches(\"^[1-9]{1}[0-9]{9}$\", \"Start number with 1-9 and must 10 digit long\").required(\"This field is required!\"),\n            address: yup.string().required(\"This field is required!\")\n        })\n    })\n\n\n\n   \n\n\n\n    return (\n\n        \n        <div className=\"doctor_form\">\n            <form onSubmit={formik.handleSubmit}>\n                <h3 className=\"title\">Lab Register</h3>\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"name\" className=\"form-label\">Lab Name</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.name} onChange={formik.handleChange} id=\"name\" placeholder=\"Enter name\" />\n                    {formik.errors.name ? <div className=\"error\">{formik.errors.name}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                    <input type=\"email\" className=\"form-control\" value={formik.values.email} onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                    {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                    <input type=\"password\" className=\"form-control\" value={formik.values.password} onChange={formik.handleChange} id=\"password\" placeholder=\"Enter password\" />\n                    {formik.errors.password ? <div className=\"error\">{formik.errors.password}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"city\" className=\"form-label\">City</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.city} onChange={formik.handleChange} id=\"city\" placeholder=\"Enter city name\" />\n                    {formik.errors.city ? <div className=\"error\">{formik.errors.city}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"phone\" className=\"form-label\">Cell #</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.phone} onChange={formik.handleChange} id=\"phone\" placeholder=\"+92 xxxxxxxxxx\" />\n                    {formik.errors.phone ? <div className=\"error\">{formik.errors.phone}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"address\" className=\"form-label\">Address</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.address} onChange={formik.handleChange} id=\"address\" placeholder=\"Enter Address\" />\n                    {formik.errors.address ? <div className=\"error\">{formik.errors.address}</div> : \"\"}\n                </div>\n\n\n                <div className=\"mb-6 p-2 register_button\">\n                    <button type=\"submit\" className=\"btn btn-success\">Next</button>\n                    \n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default SignupForm;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/doc_education.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/doc_review.js",["469"],"import React, { useState } from 'react'\nimport \"./../../index.css\"\nimport axios from 'axios';\n\n\n\nfunction Review({ submit, values, slots_data}) {\n\n\n\n    let monday_slots = slots_data[0]\n    let tuesday_slots = slots_data[1]\n    let wednesday_slots = slots_data[2]\n    let thursday_slots = slots_data[3]\n    let friday_slots = slots_data[4]\n    let saturday_slots = slots_data[5]\n    let sunday_slots = slots_data[6]\n\n    let monday_database = [\"\",\"\"]\n    let tuesday_database = [\"\",\"\"]\n    let wednesday_database = [\"\",\"\"]\n    let thursday_database = [\"\",\"\"]\n    let friday_database = [\"\",\"\"]\n    let saturday_database = [\"\",\"\"]\n    let sunday_database = [\"\",\"\"]\n\n\n    function get_mapped_data(data) {\n        let i = 1;\n        let rows = []\n        while (i <= parseInt(data)) {\n            rows.push(i)\n            i++\n        }\n        return rows\n    }\n\n\n\n    \n\n    let specialists = \"\"\n\n\n    for (let j = 0; values[1].speciality.length - 1 >= j; j++) {\n        specialists = specialists + \"| \" + values[1].speciality[j] + \" \"\n    }\n\n\n\n    function onSubmit() {\n\n\n\n        \n            let starting =  `${monday_database[0]},${tuesday_database[0]},${wednesday_database[0]},${thursday_database[0]},${friday_database[0]},${saturday_database[0]},${sunday_database[0]}`\n            let ending = `${monday_database[1]},${tuesday_database[1]},${wednesday_database[1]},${thursday_database[1]},${friday_database[1]},${saturday_database[1]},${sunday_database[1]}`\n\n        const registration_data = {\n            name: values[0].name,\n            email: values[0].email,\n            password: values[0].password,\n            city: values[0].city.toLowerCase(),\n            phone: values[0].phone,\n            address: values[0].address,\n            category: \"lab\",\n            speciality: specialists,\n            start: starting,\n            end: ending\n        }\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n\n\n\n        axios.post(\n            'http://localhost/back_end/lab_signup.php', registration_data, headers\n        ).then(\n            res => {\n                    \n                    alert(res.data.id)\n\n                    if(res.data.signal===2)\n                    {\n                        submit(4)\n                    }\n                \n                \n\n                \n                \n               \n            }\n        );\n\n\n\n    }\n\n\n\n    return (\n        <div className=\"review_form\">\n            <h2>Review</h2>\n            <br></br>\n            <h4>Registration Data</h4>\n            <p>{values[0].name}</p>\n            <p>{values[0].email}</p>\n            <p>{values[0].password}</p>\n            <p>{values[0].city}</p>\n            <p>0{values[0].phone}</p>\n            <p>{values[0].address}</p>\n            <h4>Services</h4>\n            <p>{specialists}</p>\n\n\n            {/*  ------------------------------------MONDAY----------------------------- */}\n            <h4>Slots</h4>\n            <b>Monday</b>\n            {\n                monday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(monday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = monday_slots.tickets[key].email.split(\":\")\n                        console.log(start_data)\n                        const end_data = monday_slots.tickets[key].name.split(\":\")\n                        console.log(end_data)\n                        let start_time = \"\"\n                        let end_time = \"\"\n\n                    \n\n\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        monday_database[0] =monday_database[0].concat(end_time+\"-\")\n                        monday_database[1]=monday_database[1].concat(start_time+\"-\")\n\n                    \n                        \n                        \n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    \n                    get_mapped_data(1).map((data,key)=>{\n                        monday_database[0] = \"Holiday\"\n                        monday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Tuesday----------------------------- */}\n\n            <h5>Tuesday</h5>\n            {\n                tuesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(tuesday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = tuesday_slots.tickets[key].email.split(\":\")\n                        const end_data = tuesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n                        \n\n                        tuesday_database[0] =tuesday_database[0].concat(end_time+\"-\")\n                        tuesday_database[1]=tuesday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        tuesday_database[0] = \"Holiday\"\n                        tuesday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Wednesday----------------------------- */}\n\n             <h5>Wednesday</h5>\n            {\n                wednesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(wednesday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = wednesday_slots.tickets[key].email.split(\":\")\n                        const end_data = wednesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n                        \n                        wednesday_database[0] =wednesday_database[0].concat(end_time+\"-\")\n                        wednesday_database[1]=wednesday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        wednesday_database[0] = \"Holiday\"\n                        wednesday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n\n\n             {/*  ------------------------------------Thursday----------------------------- */}\n\n             <h5>Thursday</h5>\n            {\n                thursday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(thursday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = thursday_slots.tickets[key].email.split(\":\")\n                        const end_data = thursday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        thursday_database[0] = thursday_database[0].concat(end_time+\"-\")\n                        thursday_database[1]= thursday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        thursday_database[0] = \"Holiday\"\n                        thursday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Friday----------------------------- */}\n\n             <h5>Friday</h5>\n            {\n                friday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(friday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = friday_slots.tickets[key].email.split(\":\")\n                        const end_data = friday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n\n                        friday_database[0] =friday_database[0].concat(end_time+\"-\")\n                        friday_database[1]=friday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        friday_database[0] = \"Holiday\"\n                        friday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Saturday----------------------------- */}\n\n             <h5>Saturday</h5>\n            {\n                saturday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(saturday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = saturday_slots.tickets[key].email.split(\":\")\n                        const end_data = saturday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n                        \n                        saturday_database[0] =saturday_database[0].concat(end_time+\"-\")\n                        saturday_database[1]=saturday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        saturday_database[0] = \"Holiday\"\n                        saturday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Sunday----------------------------- */}\n\n             <h5>Sunday</h5>\n            {\n                sunday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(sunday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = sunday_slots.tickets[key].email.split(\":\")\n                        const end_data = sunday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n\n                        sunday_database[0] = sunday_database[0].concat(end_time+\"-\")\n                        sunday_database[1]= sunday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        sunday_database[0] = \"Holiday\"\n                        sunday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <button className=\"btn btn-primary float-right\" onClick={() => submit(2)}>Back</button>\n                </div>\n\n                <div className=\"col\">\n                    {\n                        values[1].speciality.length === 0 ?\n                            <p className=\"error\">Plz select services!</p>\n                            :\n                            <button className=\"btn btn-success float-left\" onClick={onSubmit}>Submit</button>\n\n                    }\n                </div>\n            </div>\n\n\n\n\n\n        </div>\n    );\n}\n\nexport default Review;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/doc_slots.js",["470"],"import React, { Fragment, useState } from 'react'\nimport \"./../../index.css\"\nimport DaySlots from './../doctors/day'\n\n\nfunction DocSlots({ submit, set_values }) {\n\n    const [mondaySlots, setmondaySlots] = useState([])\n    const [tuesdaySlots, settuesdaySlots] = useState([])\n    const [wednesdaySlots, setwednesdaySlots] = useState([])\n    const [thursdaySlots, setthursdaySlots] = useState([])\n    const [fridaySlots, setfridaySlots] = useState([])\n    const [saturdaySlots, setsaturdaySlots] = useState([])\n    const [sundaySlots, setsundaySlots] = useState([])\n\n\n    const [mondaycheck, setmondaycheck] = useState(false)\n    const [tuesdaycheck, settuesdaycheck] = useState(false)\n    const [wednesdaycheck, setwednesdaycheck] = useState(false)\n    const [thursdaycheck, setthursdaycheck] = useState(false)\n    const [fridaycheck, setfridaycheck] = useState(false)\n    const [saturdaycheck, setsaturdaycheck] = useState(false)\n    const [sundaycheck, setsundaycheck] = useState(false)\n\n\n    function onSubmit() {\n        if (mondaycheck && tuesdaycheck && wednesdaycheck && thursdaycheck && fridaycheck && saturdaycheck && sundaycheck) {\n\n\n\n            let mon = { \"numberOfTickets\": String(mondaySlots['tickets'].length), \"tickets\": mondaySlots['tickets'] }\n            let tues = { \"numberOfTickets\": String(tuesdaySlots['tickets'].length), \"tickets\": tuesdaySlots['tickets'] }\n            let wed = { \"numberOfTickets\": String(wednesdaySlots['tickets'].length), \"tickets\": wednesdaySlots['tickets'] }\n            let thurs = { \"numberOfTickets\": String(thursdaySlots['tickets'].length), \"tickets\": thursdaySlots['tickets'] }\n            let fri = { \"numberOfTickets\": String(fridaySlots['tickets'].length), \"tickets\": fridaySlots['tickets'] }\n            let satur = { \"numberOfTickets\": String(saturdaySlots['tickets'].length), \"tickets\": saturdaySlots['tickets'] }\n            let sun = { \"numberOfTickets\": String(sundaySlots['tickets'].length), \"tickets\": sundaySlots['tickets'] }\n\n\n\n\n            set_values([mon, tues, wed, thurs, fri, satur, sun])\n            submit(3)\n        }\n        else {\n            alert(\"Complete your slots!\")\n        }\n    }\n\n\n    return (\n        <div>\n\n            <h3 className=\"title\">Make Slots</h3>\n\n            <DaySlots setDay={setmondaySlots} day=\"Monday\" check={setmondaycheck} />\n            <DaySlots setDay={settuesdaySlots} day=\"Tuesday\" check={settuesdaycheck} />\n            <DaySlots setDay={setwednesdaySlots} day=\"Wednesday\" check={setwednesdaycheck} />\n            <DaySlots setDay={setthursdaySlots} day=\"Thursday\" check={setthursdaycheck} />\n            <DaySlots setDay={setfridaySlots} day=\"Friday\" check={setfridaycheck} />\n            <DaySlots setDay={setsaturdaySlots} day=\"Saturday\" check={setsaturdaycheck} />\n            <DaySlots setDay={setsundaySlots} day=\"Sunday\" check={setsundaycheck} />\n\n\n\n            <br></br>\n            <div className=\"row\">\n                <div className=\"col\">\n                <button className=\"btn btn-secondary  float-right\" onClick={() => submit(1)}>Back</button>\n\n                </div>\n                <div className=\"col\">\n\n                    <button className=\"btn btn-primary\" onClick={onSubmit}>Next</button>\n                </div>\n            </div>\n\n\n\n\n        </div>\n\n\n    )\n\n\n}\n\nexport default DocSlots;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/stepper.js",["471","472","473","474"],"/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/doc_basic.js",["475","476","477"],"import React, { Fragment } from 'react'\nimport { useFormik,Field } from \"formik\";\nimport * as yup from \"yup\";\nimport \"./../../../index.css\"\nimport axios from 'axios';\n\nfunction SignupForm({submit,setformValues,preValues}) {\n\n    const formik = useFormik({\n        initialValues: {\n            name: preValues.name,\n            email: preValues.email,\n            city: preValues.city,\n            phone: preValues.phone,\n            address: preValues.address,\n        },\n        onSubmit: values => {\n            setformValues({...values})\n            submit(1)\n        \n\n        },\n        validationSchema: yup.object({\n            name: yup.string().matches(\"^[a-zA-Z ]{1,}[^0-9]$\", \"Invalid name, only use text\").required(\"This field is required!\"),\n            email: yup.string().email(\"Invalid Email\").required(\"This field is required!\"),\n            city: yup.string().matches(\"^[a-zA-Z]{3,}$\", \"Only use text must be greater than 3 words\").required(\"This field is required!\"),\n            phone: yup.string().matches(\"^[1-9]{1}[0-9]{9}$\", \"Start number with 1-9 and must 10 digit long\").required(\"This field is required!\"),\n            address: yup.string().required(\"This field is required!\")\n        })\n    })\n\n\n\n   \n\n\n\n    return (\n\n        \n        <div className=\"doctor_form\">\n            <form onSubmit={formik.handleSubmit}>\n                <h3 className=\"title\">Lab Register</h3>\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"name\" className=\"form-label\">Lab Name</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.name} onChange={formik.handleChange} id=\"name\" placeholder=\"Enter name\" />\n                    {formik.errors.name ? <div className=\"error\">{formik.errors.name}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                    <input type=\"email\" className=\"form-control\" value={formik.values.email} disabled onChange={formik.handleChange} id=\"email\" placeholder=\"Enter email\" />\n                    {formik.errors.email ? <div className=\"error\">{formik.errors.email}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"city\" className=\"form-label\">City</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.city} onChange={formik.handleChange} id=\"city\" placeholder=\"Enter city name\" />\n                    {formik.errors.city ? <div className=\"error\">{formik.errors.city}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"phone\" className=\"form-label\">Cell #</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.phone} onChange={formik.handleChange} id=\"phone\" placeholder=\"+92 xxxxxxxxxx\" />\n                    {formik.errors.phone ? <div className=\"error\">{formik.errors.phone}</div> : \"\"}\n                </div>\n\n                <div className=\"mb-2 p-2\">\n                    <label htmlFor=\"address\" className=\"form-label\">Address</label>\n                    <input type=\"text\" className=\"form-control\" value={formik.values.address} onChange={formik.handleChange} id=\"address\" placeholder=\"Enter Address\" />\n                    {formik.errors.address ? <div className=\"error\">{formik.errors.address}</div> : \"\"}\n                </div>\n\n\n                <div className=\"mb-6 p-2 register_button\">\n                    <button type=\"submit\" className=\"btn btn-success\">Next</button>\n                    \n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default SignupForm;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/doc_education.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/doc_slots.js",["478"],"import React, { Fragment, useState } from 'react'\nimport \"./../../../index.css\"\nimport DaySlots from './../../doctors/day'\n\n\nfunction DocSlots({ submit, set_values }) {\n\n    const [mondaySlots, setmondaySlots] = useState([])\n    const [tuesdaySlots, settuesdaySlots] = useState([])\n    const [wednesdaySlots, setwednesdaySlots] = useState([])\n    const [thursdaySlots, setthursdaySlots] = useState([])\n    const [fridaySlots, setfridaySlots] = useState([])\n    const [saturdaySlots, setsaturdaySlots] = useState([])\n    const [sundaySlots, setsundaySlots] = useState([])\n\n\n    const [mondaycheck, setmondaycheck] = useState(false)\n    const [tuesdaycheck, settuesdaycheck] = useState(false)\n    const [wednesdaycheck, setwednesdaycheck] = useState(false)\n    const [thursdaycheck, setthursdaycheck] = useState(false)\n    const [fridaycheck, setfridaycheck] = useState(false)\n    const [saturdaycheck, setsaturdaycheck] = useState(false)\n    const [sundaycheck, setsundaycheck] = useState(false)\n\n\n    function onSubmit() {\n        if (mondaycheck && tuesdaycheck && wednesdaycheck && thursdaycheck && fridaycheck && saturdaycheck && sundaycheck) {\n\n\n\n            let mon = { \"numberOfTickets\": String(mondaySlots['tickets'].length), \"tickets\": mondaySlots['tickets'] }\n            let tues = { \"numberOfTickets\": String(tuesdaySlots['tickets'].length), \"tickets\": tuesdaySlots['tickets'] }\n            let wed = { \"numberOfTickets\": String(wednesdaySlots['tickets'].length), \"tickets\": wednesdaySlots['tickets'] }\n            let thurs = { \"numberOfTickets\": String(thursdaySlots['tickets'].length), \"tickets\": thursdaySlots['tickets'] }\n            let fri = { \"numberOfTickets\": String(fridaySlots['tickets'].length), \"tickets\": fridaySlots['tickets'] }\n            let satur = { \"numberOfTickets\": String(saturdaySlots['tickets'].length), \"tickets\": saturdaySlots['tickets'] }\n            let sun = { \"numberOfTickets\": String(sundaySlots['tickets'].length), \"tickets\": sundaySlots['tickets'] }\n\n\n\n\n            set_values([mon, tues, wed, thurs, fri, satur, sun])\n            submit(3)\n        }\n        else {\n            alert(\"Complete your slots!\")\n        }\n    }\n\n\n    function onNext() {\n\n            set_values(\"nothing\")\n            submit(3)\n    }\n\n\n    return (\n        <div>\n\n            <h3 className=\"title\">Make Slots</h3>\n\n            <DaySlots setDay={setmondaySlots} day=\"Monday\" check={setmondaycheck} />\n            <DaySlots setDay={settuesdaySlots} day=\"Tuesday\" check={settuesdaycheck} />\n            <DaySlots setDay={setwednesdaySlots} day=\"Wednesday\" check={setwednesdaycheck} />\n            <DaySlots setDay={setthursdaySlots} day=\"Thursday\" check={setthursdaycheck} />\n            <DaySlots setDay={setfridaySlots} day=\"Friday\" check={setfridaycheck} />\n            <DaySlots setDay={setsaturdaySlots} day=\"Saturday\" check={setsaturdaycheck} />\n            <DaySlots setDay={setsundaySlots} day=\"Sunday\" check={setsundaycheck} />\n\n\n\n            <br></br>\n            <div className=\"row\">\n                <div className=\"col\">\n                <button className=\"btn btn-secondary  float-right\" onClick={() => submit(1)}>Back</button>\n\n                </div>\n                <div className=\"col\">\n\n                    <button className=\"btn btn-primary\" onClick={onSubmit}>Next</button>\n                </div>\n                <div className=\"col\">\n\n                    <button className=\"btn btn-primary\" onClick={onNext}>No Change</button>\n                </div>\n            </div>\n\n\n\n\n        </div>\n\n\n    )\n\n\n}\n\nexport default DocSlots;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/update_lab/doc_review.js",["479","480"],"import React, { useState } from 'react'\nimport \"./../../../index.css\"\nimport axios from 'axios';\nimport { Fragment } from 'react';\n\n\n\nfunction Review({ submit, values, slots_data}) {\n\n\n    let monday_slots = \"\"\n        let tuesday_slots = \"\"\n        let wednesday_slots = \"\"\n        let thursday_slots = \"\"\n        let friday_slots = \"\"\n        let saturday_slots = \"\"\n        let sunday_slots = \"\"\n\n\n    if(slots_data===\"nothing\")\n    {\n         monday_slots = slots_data\n         tuesday_slots = slots_data\n         wednesday_slots = slots_data\n         thursday_slots = slots_data\n         friday_slots = slots_data\n         saturday_slots = slots_data\n         sunday_slots = slots_data\n        \n    }\n    else{\n     monday_slots = slots_data[0]\n     tuesday_slots = slots_data[1]\n     wednesday_slots = slots_data[2]\n     thursday_slots = slots_data[3]\n     friday_slots = slots_data[4]\n     saturday_slots = slots_data[5]\n     sunday_slots = slots_data[6]\n\n    \n    }\n\n    let monday_database = [\"\",\"\"]\n    let tuesday_database = [\"\",\"\"]\n    let wednesday_database = [\"\",\"\"]\n    let thursday_database = [\"\",\"\"]\n    let friday_database = [\"\",\"\"]\n    let saturday_database = [\"\",\"\"]\n    let sunday_database = [\"\",\"\"]\n\n    \n\n\n    function get_mapped_data(data) {\n        let i = 1;\n        let rows = []\n        while (i <= parseInt(data)) {\n            rows.push(i)\n            i++\n        }\n        return rows\n    }\n\n\n\n    \n\n    let specialists = \"\"\n\n\n    for (let j = 0; values[1].speciality.length - 1 >= j; j++) {\n        specialists = specialists + \"| \" + values[1].speciality[j] + \" \"\n    }\n\n\n\n    function onSubmit() {\n\n        let starting = \"\"\n        let ending = \"\"\n\n            if(slots_data===\"nothing\")\n            {\n                starting = \"\"\n                ending = \"\"\n            }\n            else{\n                starting =  `${monday_database[0]},${tuesday_database[0]},${wednesday_database[0]},${thursday_database[0]},${friday_database[0]},${saturday_database[0]},${sunday_database[0]}`\n                ending = `${monday_database[1]},${tuesday_database[1]},${wednesday_database[1]},${thursday_database[1]},${friday_database[1]},${saturday_database[1]},${sunday_database[1]}`\n                }\n        \n\n\n        const registration_data = {\n\n            lab: sessionStorage.getItem(\"lab_id\"),\n            name: values[0].name,\n            email: values[0].email,\n            city: values[0].city.toLowerCase(),\n            phone: values[0].phone,\n            address: values[0].address,\n            speciality: specialists,\n            start: starting,\n            end: ending\n        }\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n\n        console.log(registration_data)\n\n\n\n        axios.post(\n            'http://localhost/back_end/lab_update.php', registration_data, headers\n        ).then(\n            res => {\n                    \n                    alert(res.data.id)\n\n                    if(res.data.signal===1)\n                    {\n                        \n                        sessionStorage.setItem(\"name\", registration_data.name)\n                        sessionStorage.setItem(\"city\", registration_data.city)\n                        sessionStorage.setItem(\"address\", registration_data.address)\n                        sessionStorage.setItem(\"phone\", registration_data.phone)\n\n                        submit(4)\n                    }\n                \n                \n\n                \n                \n               \n            }\n        );\n\n\n\n    }\n\n\n\n    return (\n        <div className=\"review_form\">\n            <h2>Review</h2>\n            <br></br>\n            <h4>Registration Data</h4>\n            <p>{values[0].name}</p>\n            <p>{values[0].email}</p>\n            <p>{values[0].city}</p>\n            <p>0{values[0].phone}</p>\n            <p>{values[0].address}</p>\n            <h4>Services</h4>\n            <p>{specialists}</p>\n\n\n            {/*  ------------------------------------MONDAY----------------------------- */}\n\n            <h2>Slots</h2>\n            <h5>Monday</h5>\n            \n            {\n                monday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(monday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = monday_slots.tickets[key].email.split(\":\")\n                        console.log(start_data)\n                        const end_data = monday_slots.tickets[key].name.split(\":\")\n                        console.log(end_data)\n                        let start_time = \"\"\n                        let end_time = \"\"\n\n                    \n\n\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        monday_database[0] =monday_database[0].concat(end_time+\"-\")\n                        monday_database[1]=monday_database[1].concat(start_time+\"-\")\n\n                    \n                        \n                        \n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    \n                    get_mapped_data(1).map((data,key)=>{\n                        monday_database[0] = \"Holiday\"\n                        monday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n            {/*  ------------------------------------Tuesday----------------------------- */}\n\n            <h5>Tuesday</h5>\n            {\n                tuesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(tuesday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = tuesday_slots.tickets[key].email.split(\":\")\n                        const end_data = tuesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n                        \n\n                        tuesday_database[0] =tuesday_database[0].concat(end_time+\"-\")\n                        tuesday_database[1]=tuesday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        tuesday_database[0] = \"Holiday\"\n                        tuesday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Wednesday----------------------------- */}\n\n             <h5>Wednesday</h5>\n            {\n                wednesday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(wednesday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = wednesday_slots.tickets[key].email.split(\":\")\n                        const end_data = wednesday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n                        \n                        wednesday_database[0] =wednesday_database[0].concat(end_time+\"-\")\n                        wednesday_database[1]=wednesday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        wednesday_database[0] = \"Holiday\"\n                        wednesday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n\n\n             {/*  ------------------------------------Thursday----------------------------- */}\n\n             <h5>Thursday</h5>\n            {\n                thursday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(thursday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = thursday_slots.tickets[key].email.split(\":\")\n                        const end_data = thursday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n\n                        thursday_database[0] = thursday_database[0].concat(end_time+\"-\")\n                        thursday_database[1]= thursday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        thursday_database[0] = \"Holiday\"\n                        thursday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Friday----------------------------- */}\n\n             <h5>Friday</h5>\n            {\n                friday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(friday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = friday_slots.tickets[key].email.split(\":\")\n                        const end_data = friday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div>\n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n\n                        friday_database[0] =friday_database[0].concat(end_time+\"-\")\n                        friday_database[1]=friday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        friday_database[0] = \"Holiday\"\n                        friday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Saturday----------------------------- */}\n\n             <h5>Saturday</h5>\n            {\n                saturday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(saturday_slots.numberOfTickets).map((data, key) => {\n\n                        const start_data = saturday_slots.tickets[key].email.split(\":\")\n                        const end_data = saturday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div>\n                        \n                        saturday_database[0] =saturday_database[0].concat(end_time+\"-\")\n                        saturday_database[1]=saturday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        saturday_database[0] = \"Holiday\"\n                        saturday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n             {/*  ------------------------------------Sunday----------------------------- */}\n\n             <h5>Sunday</h5>\n            {\n                sunday_slots.numberOfTickets !== \"0\" ?\n\n\n                    get_mapped_data(sunday_slots.numberOfTickets).map((data, key) => {\n                        const start_data = sunday_slots.tickets[key].email.split(\":\")\n                        const end_data = sunday_slots.tickets[key].name.split(\":\")\n                        let start_time = \"\"\n                        let end_time = \"\"\n                        parseInt(start_data[0]) > 12 ? start_time = `${parseInt(start_data[0])}:${start_data[1]} PM` : start_time = `${start_data[0]}:${start_data[1]} AM`\n                        parseInt(start_data[0]) === 12 ? start_time = `${start_data[0]}:${start_data[1]} PM` : <div></div> \n\n                        parseInt(end_data[0]) > 12 ? end_time = `${parseInt(end_data[0])}:${end_data[1]} PM` : end_time = `${end_data[0]}:${end_data[1]} AM`\n                        parseInt(end_data[0]) === 12 ? end_time = `${end_data[0]}:${end_data[1]} PM` : <div></div> \n\n                        sunday_database[0] = sunday_database[0].concat(end_time+\"-\")\n                        sunday_database[1]= sunday_database[1].concat(start_time+\"-\")\n\n                        return (\n                            <div key={key}>\n                                <br></br>\n                                <p>From {end_time} to {start_time}</p>\n                            </div>\n                        )\n                    })\n\n\n                    :\n                    get_mapped_data(1).map((data,key)=>{\n                        sunday_database[0] = \"Holiday\"\n                        sunday_database[1]= \"Holiday\"\n                        return(\n                            <div key={key}>\n                            <p>Not Available</p>\n                            </div>\n                        )\n\n                    })\n            }\n\n\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <button className=\"btn btn-primary float-right\" onClick={() => submit(2)}>Back</button>\n                </div>\n\n                <div className=\"col\">\n                    \n                        \n                            <button className=\"btn btn-success float-left\" onClick={onSubmit}>Update</button>\n\n                    \n                </div>\n            </div>\n\n\n\n\n\n        </div>\n    );\n}\n\nexport default Review;","/home/nadeem/Desktop/react_apps/docforyou/src/components/search_lab.js",["481"],"import React, { useState } from 'react'\nimport { useFormik } from \"formik\";\nimport {Redirect} from 'react-router-dom'\nimport * as yup from \"yup\";\nimport './../index.css'\nimport ShowLabs from './labs_module/search_lab/show_labs'\nimport { Fragment } from 'react';\n\nfunction SearchLab() {\n\n\n    let [changepage, setchangepage] = useState(false)\n    let [docdata, setdocdata] = useState({})\n\n\n\n\n    const formik = useFormik({\n        initialValues: {\n            city: \"lahore\"\n        },\n        onSubmit: (values) => {\n\n            setdocdata(values)\n            setchangepage(true)\n\n\n\n\n        },\n        validationSchema: yup.object({\n\n        })\n    })\n\n\n    if (changepage) {\n        return (<Redirect   to={{ pathname: \"/lab/search\",\n        state: { city_data: docdata }}}/>)\n    }\n\n\n    return (\n        <Fragment>\n\n            <div className=\"s02\">\n                <form onSubmit={formik.handleSubmit}>\n                    <div className=\"row\">\n                    <h2 className=\"searching\">Search Lab</h2>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-lg-10 col-sm-12 mb-2\">\n                            <select className=\"form-select\" id=\"city\" name=\"city\" value={formik.values.city} onChange={formik.handleChange} aria-label=\"Default select example\">\n                                <option value=\"lahore\">Lahore</option>\n                                <option value=\"karachi\">Karachi</option>\n                                <option value=\"islamabad\">Islamabad</option>\n                                <option value=\"rawalpindi\">Rawalpindi</option>\n                                <option value=\"sargodha\">Sargodha</option>\n                                <option value=\"shahdara\">Shahdara</option>\n                                <option value=\"gujranwala\">Gujranwala</option>\n                            </select>\n                        </div>\n\n                        <div className=\"col-lg-2 col-sm-6 mb-2\">\n                            <input type=\"submit\" className=\"btn btn-primary\" value=\"Search\" />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default SearchLab;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/search_lab/show_labs.js",["482"],"import React, { useState, useEffect } from 'react'\nimport { Fragment } from 'react';\nimport {useParams,useLocation} from 'react-router-dom'\nimport { get_labs,get_max_user_labs } from './../../api_requests/login'\nimport MakeApppointment from './make_lab_appointment'\nimport Navbar from './../../navbar'\nimport './../../../index.css'\n\n\nfunction ShowLabs() {\n\n    let [doctors_record, setdoctors_record] = useState([])\n    let [changepage,setchangepage] = useState(false)\n    let [index,setindex] = useState()\n    let [doctor_key,setdoctorkey] = useState({})\n    let [max_appointments,set_max_appointments] = useState([])\n\n    let check_doctors = true\n    let id_user = 0\n    let location = useLocation()\n    let mycity = location.state.city_data.city\n\n    if(sessionStorage.getItem(\"user_id\"))\n    {\n        id_user = sessionStorage.getItem(\"user_id\")\n    }\n    else{\n        id_user = false\n    }\n\n\n\n    let i = 1;\n    let rows = []\n\n   \n\n\n    useEffect(()=>{\n\n        async function max_appoints(id_user){\n\n            let data = await get_max_user_labs(id_user)\n            set_max_appointments(data)\n\n        }\n\n        max_appoints(id_user)\n\n    }, [id_user]);\n\n\n\n\n\n\n\n\n\n\n\n    useEffect(() => {\n        async function data_show(mycity) {\n            let real_data = await get_labs(mycity);\n\n            setdoctors_record(real_data);\n        }\n        data_show(mycity);\n    }, [mycity]);\n\n\n    if (!doctors_record) {\n        return (\n            <h1>Loading!</h1>\n        )\n    }\n    else {\n\n        if (doctors_record['counter'] > 0 ) {\n            while (i <= doctors_record['counter']) {\n                rows.push(i)\n                i++\n            }\n        }\n        else {\n            check_doctors = false\n        }\n\n\n    }\n\n\n    if(changepage)\n    {\n        return(<MakeApppointment data={doctors_record} doctor_key = {doctor_key} indexx={index} callback={clickpage}/>)\n    }\n\n\n    function clickpage(key,flag) {\n        setindex(key)\n        setchangepage(flag)\n\n    }\n\n\n\n\n\n\n\n\n\n    return (\n\n        <Fragment>\n            <Navbar/>\n            <div>\n\n            <h3 className=\"title\">Labs</h3>\n\n            \n            </div>\n\n\n            {/* <div className=\"review_form\">\n                <p><b>Search by name</b></p>\n            {\n                check_doctors ? \n                rows.map((data,key)=>{\n                    return(\n                        <div key={key}>\n                            <a href={\"#\"+doctors_record.email[key]}>{doctors_record.name[key]}</a>\n                        </div>\n                    )\n                })\n\n                :\n                \"\"\n            }\n\n            </div> */}\n\n\n\n\n\n\n\n{\n                check_doctors ?\n\n                    rows.map((data, key) => {\n                        return (\n                            <div className=\"review_form\" key={key} id={doctors_record.email[key]}>\n                                <div className=\"container\">\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <b>{doctors_record.name[key]}</b>\n                                        </div>\n                                        <div className=\"col\">\n                                            <b>{doctors_record.email[key]}</b>\n                                        </div>\n                                    </div>\n                                    <hr></hr>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            +92 {doctors_record.phone[key]}\n                                        </div>\n                                        <div className=\"col\">\n                                            {doctors_record.address[key]}\n                                        </div>\n                                        <div className=\"col\">\n                                            <b>{doctors_record.city[key]}</b>\n                                        </div>\n                                    </div>\n                        \n                                    \n                                    <hr></hr>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <b>Services:</b> <br></br>{doctors_record.speciality[key]}\n                                        </div>\n                                    </div>\n\n                \n                                </div>\n                                <br></br>\n                                {\n                                    sessionStorage.getItem(\"user_id\") ?\n\n                                        max_appointments[\"signal\"]===1 ?\n\n                                        <p className=\"error\">{max_appointments[\"message\"]}</p> \n                                    \n                                        :\n                                    \n                                        <button type=\"button\" className=\"btn btn-primary\" onClick={()=> {\n                                            clickpage(key,true)\n                                            setdoctorkey({\"lab_key\":doctors_record[\"lab_id\"][key]})\n                                        }\n                                        }>Appoint</button>\n                                    :\n                                    <p className=\"error\">Plz login to make appointments!</p>\n                                }\n                                \n                               \n\n                                \n\n\n                            </div>\n                        )\n\n                    })\n                    :\n                    <div className=\"review_form\">\n                        <h2>No labs Yet</h2>\n                    </div>\n            }\n\n\n\n\n\n\n\n\n \n\n\n        </Fragment  >\n\n    )\n\n}\n\nexport default ShowLabs;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/search_lab/make_lab_appointment.js",["483","484","485","486","487","488"],"import { Container } from '@material-ui/core';\nimport React, { useState } from 'react'\nimport { Fragment } from 'react';\nimport axios from 'axios';\nimport './../../../index.css'\nimport Navbar from './../../navbar'\n\nfunction MakeApppointment({ data, doctor_key, indexx, callback }) {\n    let [validdate, setvaliddate] = useState(false)\n    let [holiday, setholiday] = useState()\n    let [showday, setshowday] = useState()\n    let [mapping, setmapping] = useState([])\n    let [date_of_appoinment, set_date_of_appointment] = useState()\n    let [number_patients, set_number_patients] = useState(1)\n\n    let [received_data, set_received_data] = useState({ \"data\": \"\", \"isloading\": false })\n\n    console.log(data)\n    console.log(doctor_key)\n\n    if(!doctor_key)\n    {\n        return(<div>\n            <h1>Loading</h1>\n        </div>)\n    }\n\n\n\n    function into_hours_minutes(timing_start, timing_end) {\n        let slots = []\n        let real_slots = []\n        // console.log(timing_start,timing_end)\n        let hour1 = []\n        let minute1 = []\n        let mode = []\n        let counter = 0;\n        let myarray = []  // contain shifts data---------------------\n\n        timing_start[0].map((data1, key) => {\n            counter = counter + 1\n            myarray.push(data1)\n\n        })\n\n        console.log(myarray)\n\n        let odd_count = -1\n        for (let i = 0; i < timing_end[0].length; i++) {\n            odd_count = odd_count + 2\n            myarray.splice(odd_count, 0, timing_end[0][i])\n            console.log(myarray)\n        }\n\n    \n\n        console.log(myarray)\n\n        myarray.map((data1, key) => {\n            console.log(data1)\n            let hour_min_mode = data1.split(\" \")\n            let mor_eve = hour_min_mode[1]\n            mode.push(mor_eve)\n            hour_min_mode.pop()\n            let hour_min = hour_min_mode[0].split(\":\")\n            // // console.log(hour_min,mor_eve)\n            // let hour_min = hour_min_mode[key].split(\":\")\n\n            let hour = parseInt(hour_min[0])\n            let minute = parseInt(hour_min[1])\n            hour1.push(hour)\n            minute1.push(minute)\n\n\n            // console.log(data1[key].split(\" \")\n\n        })\n\n\n\n        for (let index = 0; index < myarray.length; index = index + 2) {\n\n\n            let a = hour1[index]\n            let b = hour1[index + 1]\n            let m1 = minute1[index]\n            let m2 = minute1[index + 1]\n            slots.push(a + \":\" + m1)\n            while (a <= b) {\n                if (m1 + 15 < 60 && a < b) {\n                    m1 = m1 + 15\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                }\n                else if (m1 + 15 > 60 && a < b) {\n                    m1 = 15 - (60 - m1)\n                    a = a + 1\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                }\n                else if (m1 + 15 === 60 && a < b) {\n                    m1 = 0\n                    a = a + 1\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                }\n                else if (m1 + 15 <= 60 && a === b && m1 + 15 < m2) {\n                    m1 = m1 + 15\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                }\n                else if (m1 + 15 <= 60 && a === b && m1 + 15 >= m2) {\n                    m1 = m2\n                    // console.log(a+\":\"+m1)\n                    slots.push(a + \":\" + m1)\n                    a = a + 1\n                }\n                else {\n                    a = b + 1\n                }\n\n\n            }\n\n            real_slots.push(slots)\n            slots = []\n\n\n        }\n\n\n\n        return (\n            real_slots\n        )\n\n\n\n\n\n    }\n\n\n\n    function get_array_of_slots(day) {\n        let start = []\n        let end = []\n\n        //  START SLOTS---------------------------------\n\n        let number_of_slots_per_day_start = 0;\n        let slots_of_weeks;\n        \n            slots_of_weeks = data.start[indexx].split(\",\")\n        \n        if (slots_of_weeks[day] !== \"Holiday\") {\n            number_of_slots_per_day_start = slots_of_weeks[day].split(\"-\")\n            number_of_slots_per_day_start.pop()\n            start.push(number_of_slots_per_day_start)\n\n            //     END SLOTS------------------------\n            let slots_end ;\n            slots_end = data.end[indexx].split(\",\")\n            \n\n\n            let a = slots_end[day].split(\"-\")\n            a.pop()\n            end.push(a)\n            console.log(\"start\",start)\n            console.log(\"end\",end)\n\n            let my_whole_slots = into_hours_minutes(start, end)\n\n            setmapping(my_whole_slots)\n\n        }\n\n        else {\n            setholiday(1)\n        }\n\n\n        // console.log(start,end)\n\n\n        // END SLOTS---------------------------\n\n\n\n\n\n\n\n\n        // if(slots_of_weeks[appointmentday]===\"Holiday\")\n        // {\n        //     setholiday(\"Holiday\")\n        // }\n        // else{\n        //     number_of_slots_per_day = slots_of_weeks[appointmentday]\n        //     number_of_slots_per_day.pop()\n        //     console.log(number_of_slots_per_day)\n\n        // }\n\n\n\n\n\n\n\n\n    }\n\n\n\n\n\n    function getmeday(day) {\n        let array_of_day = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n        return array_of_day[day]\n    }\n\n    function date(e) {\n        set_date_of_appointment(e.target.value)\n        setholiday(0)\n        let din = 0;\n        let present_date = new Date()\n        let appoinment_date = new Date(e.target.value)\n        if (present_date - appoinment_date > 0) {\n            setvaliddate(false)\n        }\n        else {\n            setvaliddate(true)\n        }\n        // console.log(appoinment_date.getDay())\n\n        if (parseInt((appoinment_date.getDay() - 1)) === -1) {\n            din = 6\n        }\n        else\n            din = appoinment_date.getDay() - 1\n\n        setshowday(din)\n        // console.log(din)\n        get_array_of_slots(din)\n\n    }\n\n\n    let api_data = \"\"\n\n    function onclick_submit(value) {\n\n        let appoinment_data = {\n            \"date\": date_of_appoinment,\n            \"lab_id\": doctor_key['lab_key'],\n            \"time\": value,\n            \"user_id\": sessionStorage.getItem('user_id'),\n            \"patients\": number_patients\n        }\n\n        console.log(appoinment_data)\n\n\n        var headers = {\n            \"Content-Type\": \"application/json;charset=UTF-8\",\n        }\n\n\n        console.log(appoinment_data)\n\n        axios.post(\n            'http://localhost/back_end/lab_appointment.php', appoinment_data, headers\n        ).then(\n            res => {\n                if (res.data.signal == 2) {\n                    alert(res.data.id)\n                }\n                else {\n                    set_received_data({ \"data\": res.data, \"isloading\": true })\n                }\n\n            }\n        );\n\n    }\n\n\n    if (received_data[\"isloading\"]) {\n        return (\n            <Fragment>\n                <Navbar/>\n            \n            <div className=\"review_form\">\n                <h1>Appointment made</h1>\n\n            </div>\n            </Fragment>\n\n        )\n    }\n\n\n\n\n\n\n\n    return (\n        <Fragment>\n            <Navbar/>\n            <div className=\"review_form\">\n                <div className=\"row\">\n                    <h3>Book Appointment</h3>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <br></br>\n                        select date:  <input type=\"date\" onChange={(e) => date(e)} placeholder=\"select date of appointment\" />\n                    </div>\n                </div>\n                <br></br>\n                <div className=\"row\">\n                    Patients:\n                    <div className=\"col\">\n                        <select className=\"form-select\" id=\"city\" name=\"slot\" onChange={(e) => set_number_patients(parseInt(e.target.value))} aria-label=\"Default select example\">\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                        </select>\n                    </div>\n                </div>\n\n                <br></br>\n                {\n                    validdate ?\n                        <div>\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <h1>{getmeday(showday)}</h1>\n                                </div>\n                            </div>\n                        </div>\n                        :\n                        <div className=\"error\"></div>\n\n\n                }\n\n                {\n                    !holiday ?\n                        mapping.map((data, kee) => {\n\n                            return (\n\n                                <div className=\"row\" key={kee}>\n                                    <h4>Shift {kee + 1}</h4>\n\n\n\n\n                                    <div className=\"col\">\n                                        {\n                                            data.map((a, b) => {\n                                                let time_slots = a.split(\":\")\n                                                let c = a\n                                                parseInt(time_slots[0]) > 12 ? a = `${parseInt(time_slots[0]) - 12}:${time_slots[1]} PM` : a = `${time_slots[0]}:${time_slots[1]} AM`\n                                                parseInt(time_slots[0]) === 12 ? a = `${parseInt(time_slots[0])}:${time_slots[1]} PM` : <div></div>\n                                                parseInt(time_slots[0]) === 0 ? a = `${parseInt(time_slots[0]) + 12}:${time_slots[1]} AM` : <div></div>\n\n\n\n\n\n                                                return (\n                                                    <Fragment key={b}>\n                                                        <button value={a} onClick={(e) => onclick_submit(e.target.value)} className=\"btn btn-outline-success appoinment\">{a}</button>\n                                                    </Fragment>\n                                                )\n                                            })\n                                        }\n                                    </div>\n\n                                </div>\n                            )\n\n                        })\n\n\n\n                        :\n\n                        <h5>Holiday</h5>\n\n\n\n\n                }\n                <button className=\"btn btn-primary back\" onClick={() => callback(0, false)}>Back</button>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default MakeApppointment;","/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/lab_appointments.js",["489"],"import React, { useState,useEffect } from 'react'\nimport Navbar from '../navbar'\nimport \"./../../index.css\"\nimport {get_lab_appoinments,cancel_appoinments} from './../api_requests/login'\n\n\nfunction User_Lab_Appointments() {\n\n    let id = sessionStorage.getItem('user_id')\n\n    \n\n    let [appointment,setappointment] = useState([])\n    let [appointment_cancel,set_appointment_cancel] = useState(0)\n    let [message,set_message] = useState(\"\")\n\n    let check_appointment = true\n\n\n    let i = 1;\n    let rows = []\n  \n    \n\n    useEffect(() => {\n        async function data_show(id) {\n          let real_data = await get_lab_appoinments(id);\n\n          setappointment(real_data);\n        }\n        data_show(id);\n      },[id,appointment_cancel]);\n\n\n    //   for cancelation of appointment\n\n      useEffect(() => {\n        async function appointment_del(id) {\n          let real_data = await cancel_appoinments(id);\n\n          set_message(real_data);\n        }\n        appointment_del(appointment_cancel);\n      },[appointment_cancel]);\n\n\n\n\n    \n      if (!appointment)\n        return (<h1>Loading...</h1>)\n    else\n    {\n        if(appointment['counter']>0 )\n        {\n            while (i <= appointment['counter']) {\n                rows.push(i)\n                i++\n            }\n\n            \n\n            \n        }\n        else{\n            check_appointment = false\n        }\n        \n        \n    }\n\n    console.log(appointment)\n\n    function cancel_appointment(id)\n    {\n        set_appointment_cancel(parseInt(id))\n        window.location.reload(false)\n    }\n      \n\n    let datee = new Date() / 1000\n\n    return (\n        <div>\n            <Navbar/>\n            <h1 className=\"title\">Lab Appointments</h1>\n\n            \n\n            \n                {\n                    check_appointment ? \n                    rows.map((data,key)=>{\n                        \n                        let change_css = \"review_form\"\n\n                        if(datee > new Date(appointment['date'][key]) / 1000 || appointment['status'][key] === \"cancel\"){\n                            change_css += \"1\"\n                        }\n                        else{\n                            console.log(datee,appointment['date'][key])\n                            change_css += \"2\"\n                        }\n\n\n\n                        return(\n\n                        \n                            <div className={change_css} key={key}>\n                                <h1>Lab Detail</h1>\n                                name:  <b>{appointment['name'][key]}</b><br></br>\n                                email: <b>{appointment['email'][key]}</b><br></br>\n                                city: <b>{appointment['city'][key]}</b><br></br>\n                                phone: <b>{appointment['phone'][key]}</b><br></br>\n                                appointment_date: <b>{appointment['date'][key]}</b><br></br>\n                                slot: <b>{appointment['slot'][key]}</b><br></br>\n                                number_of_appointments: <b>{appointment['patients'][key]}</b><br></br>\n                                address: <b>{appointment['address'][key]}</b><br></br>\n                                {\n                                    appointment['status'][key] === \"active\" ? \n                                    <input type=\"submit\" className=\"btn btn-primary\" onClick={()=>cancel_appointment(appointment['appointment_id'][key])} value=\"Cancel Appointment\" />\n                                    :\n                                    <p className=\"error\">Canceled!</p>\n                                }\n\n                            </div>\n                        )\n                    })\n                    :\n                    <div className=\"review_form\">\n                        <h1>No Appointments Yet!</h1>\n                    </div>\n                    \n\n                }\n\n\n\n            \n\n\n            \n        </div>\n    );\n}\n\nexport default User_Lab_Appointments;","/home/nadeem/Desktop/react_apps/docforyou/src/components/labs_module/appointments.js",["490"],"import React, { useState,useEffect } from 'react'\nimport Navbar from './../navbar'\nimport \"./../../index.css\"\nimport {get_appointments_lab,cancel_appoinments} from './../api_requests/login'\n\n\nfunction Lab_Appointments() {\n\n    let id = sessionStorage.getItem('lab_id')\n\n    let [appointment_cancel,set_appointment_cancel] = useState(0)\n\n    let [appointment,setappointment] = useState([])\n\n    let check_appointment = true\n\n\n    let i = 1;\n    let rows = []\n    \n\n    useEffect(() => {\n        async function data_show(id) {\n          let real_data = await get_appointments_lab(id);\n\n          setappointment(real_data);\n        }\n        data_show(id);\n      },[id]);\n\n\n\n      useEffect(() => {\n        async function appointment_del(id) {\n          let real_data = await cancel_appoinments(id);\n        }\n        appointment_del(appointment_cancel);\n      },[appointment_cancel]);\n\n\n\n\n    \n      if (!appointment)\n        return (<h1>Loading...</h1>)\n    else\n    {\n        if(appointment['counter']>0)\n        {\n            while (i <= appointment['counter']) {\n                rows.push(i)\n                i++\n            }\n\n            \n        }\n        else{\n            check_appointment = false\n        }\n        \n        \n    }\n\n    console.log(appointment)\n\n    function cancel_appointment(id)\n    {\n        set_appointment_cancel(parseInt(id))\n        window.location.reload(false)\n    }\n      \n\n    let datee = new Date() / 1000\n\n    return (\n        <div>\n            <Navbar/>\n            <h1 className=\"title\">My Patients</h1>\n\n            \n\n                {\n                    check_appointment ? \n                    rows.map((data,key)=>{\n                        \n                        let change_css = \"review_form\"\n\n                        if(datee > new Date(appointment['date'][key]) / 1000 || appointment['status'][key] === \"cancel\"){\n                            change_css += \"1\"\n                        }\n                        else{\n                            console.log(datee,appointment['date'][key])\n                            change_css += \"2\"\n                        }\n\n\n\n                        return(\n\n                        \n                            <div className={change_css} key={key}>\n                                <h3>Patient Detail</h3>\n                                name:  <b>{appointment['name'][key]}</b><br></br>\n                                email: <b>{appointment['email'][key]}</b><br></br>\n                                phone: <b>{appointment['phone'][key]}</b><br></br>\n                                address: <b>{appointment['address'][key]}</b><br></br>\n                                <hr></hr>\n                                <h3>Appointment Time</h3>\n                                slot: <b>{appointment['slot'][key]}</b><br></br>\n                                date: <b>{appointment['date'][key]}</b><br></br>\n                                # of patients: <b>{appointment['patients'][key]}</b><br></br> \n\n                                {\n                                    appointment['status'][key] === \"active\" ? \n                                    <input type=\"submit\" className=\"btn btn-primary\" onClick={()=>cancel_appointment(appointment['appointment_id'][key])} value=\"Cancel Appointment\" />\n                                    :\n                                    <p className=\"error\">Canceled!</p>\n                                }\n\n                            </div>\n                        )\n                    })\n                    :\n                    <div className=\"review_form\">\n                        <h1>No Appointments Yet!</h1>\n                    </div>\n                    \n\n                }\n\n\n\n\n            \n\n\n            \n        </div>\n    );\n}\n\nexport default Lab_Appointments;","/home/nadeem/Desktop/react_apps/docforyou/src/components/googlemaps/map_api.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/covid_19/select_country.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/covid_19/covid_data_card.js",[],"/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/update_account.js",["491","492"],"/home/nadeem/Desktop/react_apps/docforyou/src/components/userfolder/update_password.js",["493","494","495"],{"ruleId":"496","replacedBy":"497"},{"ruleId":"498","replacedBy":"499"},{"ruleId":"500","severity":1,"message":"501","line":3,"column":8,"nodeType":"502","messageId":"503","endLine":3,"endColumn":14},{"ruleId":"500","severity":1,"message":"504","line":4,"column":17,"nodeType":"502","messageId":"503","endLine":4,"endColumn":21},{"ruleId":"500","severity":1,"message":"505","line":39,"column":11,"nodeType":"502","messageId":"503","endLine":39,"endColumn":18},{"ruleId":"506","severity":1,"message":"507","line":71,"column":21,"nodeType":"508","endLine":71,"endColumn":65},{"ruleId":"506","severity":1,"message":"509","line":112,"column":45,"nodeType":"508","endLine":112,"endColumn":93},{"ruleId":"506","severity":1,"message":"509","line":146,"column":41,"nodeType":"508","endLine":146,"endColumn":73},{"ruleId":"506","severity":1,"message":"509","line":150,"column":45,"nodeType":"508","endLine":150,"endColumn":93},{"ruleId":"506","severity":1,"message":"509","line":174,"column":45,"nodeType":"508","endLine":174,"endColumn":93},{"ruleId":"506","severity":1,"message":"509","line":201,"column":45,"nodeType":"508","endLine":201,"endColumn":100},{"ruleId":"506","severity":1,"message":"509","line":221,"column":41,"nodeType":"508","endLine":221,"endColumn":73},{"ruleId":"506","severity":1,"message":"509","line":224,"column":45,"nodeType":"508","endLine":224,"endColumn":93},{"ruleId":"500","severity":1,"message":"510","line":2,"column":17,"nodeType":"502","messageId":"503","endLine":2,"endColumn":25},{"ruleId":"500","severity":1,"message":"511","line":3,"column":20,"nodeType":"502","messageId":"503","endLine":3,"endColumn":25},{"ruleId":"500","severity":1,"message":"512","line":4,"column":8,"nodeType":"502","messageId":"503","endLine":4,"endColumn":17},{"ruleId":"513","severity":1,"message":"514","line":10,"column":13,"nodeType":"508","endLine":10,"endColumn":25},{"ruleId":"500","severity":1,"message":"515","line":9,"column":10,"nodeType":"502","messageId":"503","endLine":9,"endColumn":23},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"516","line":85,"column":11,"nodeType":"502","messageId":"503","endLine":85,"endColumn":26},{"ruleId":"496","replacedBy":"517"},{"ruleId":"498","replacedBy":"518"},{"ruleId":"519","severity":1,"message":"520","line":36,"column":5,"nodeType":"521","messageId":"522","endLine":47,"endColumn":6},{"ruleId":"500","severity":1,"message":"523","line":78,"column":11,"nodeType":"502","messageId":"503","endLine":78,"endColumn":21},{"ruleId":"500","severity":1,"message":"524","line":82,"column":11,"nodeType":"502","messageId":"503","endLine":82,"endColumn":21},{"ruleId":"500","severity":1,"message":"525","line":86,"column":11,"nodeType":"502","messageId":"503","endLine":86,"endColumn":22},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"511","line":2,"column":20,"nodeType":"502","messageId":"503","endLine":2,"endColumn":25},{"ruleId":"500","severity":1,"message":"526","line":5,"column":8,"nodeType":"502","messageId":"503","endLine":5,"endColumn":13},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"526","line":5,"column":8,"nodeType":"502","messageId":"503","endLine":5,"endColumn":13},{"ruleId":"500","severity":1,"message":"527","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"528","severity":1,"message":"529","line":130,"column":125,"nodeType":"502","messageId":"530","endLine":130,"endColumn":135},{"ruleId":"528","severity":1,"message":"531","line":133,"column":115,"nodeType":"502","messageId":"530","endLine":133,"endColumn":123},{"ruleId":"528","severity":1,"message":"529","line":180,"column":125,"nodeType":"502","messageId":"530","endLine":180,"endColumn":135},{"ruleId":"528","severity":1,"message":"531","line":183,"column":115,"nodeType":"502","messageId":"530","endLine":183,"endColumn":123},{"ruleId":"528","severity":1,"message":"529","line":225,"column":125,"nodeType":"502","messageId":"530","endLine":225,"endColumn":135},{"ruleId":"528","severity":1,"message":"531","line":228,"column":115,"nodeType":"502","messageId":"530","endLine":228,"endColumn":123},{"ruleId":"528","severity":1,"message":"529","line":272,"column":125,"nodeType":"502","messageId":"530","endLine":272,"endColumn":135},{"ruleId":"528","severity":1,"message":"531","line":275,"column":115,"nodeType":"502","messageId":"530","endLine":275,"endColumn":123},{"ruleId":"528","severity":1,"message":"529","line":316,"column":125,"nodeType":"502","messageId":"530","endLine":316,"endColumn":135},{"ruleId":"528","severity":1,"message":"531","line":319,"column":115,"nodeType":"502","messageId":"530","endLine":319,"endColumn":123},{"ruleId":"528","severity":1,"message":"529","line":361,"column":125,"nodeType":"502","messageId":"530","endLine":361,"endColumn":135},{"ruleId":"528","severity":1,"message":"531","line":364,"column":115,"nodeType":"502","messageId":"530","endLine":364,"endColumn":123},{"ruleId":"528","severity":1,"message":"529","line":405,"column":125,"nodeType":"502","messageId":"530","endLine":405,"endColumn":135},{"ruleId":"528","severity":1,"message":"531","line":408,"column":115,"nodeType":"502","messageId":"530","endLine":408,"endColumn":123},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"532","line":2,"column":10,"nodeType":"502","messageId":"503","endLine":2,"endColumn":19},{"ruleId":"500","severity":1,"message":"533","line":2,"column":20,"nodeType":"502","messageId":"503","endLine":2,"endColumn":30},{"ruleId":"500","severity":1,"message":"534","line":2,"column":32,"nodeType":"502","messageId":"503","endLine":2,"endColumn":38},{"ruleId":"500","severity":1,"message":"535","line":2,"column":40,"nodeType":"502","messageId":"503","endLine":2,"endColumn":44},{"ruleId":"500","severity":1,"message":"511","line":2,"column":46,"nodeType":"502","messageId":"503","endLine":2,"endColumn":51},{"ruleId":"500","severity":1,"message":"536","line":3,"column":13,"nodeType":"502","messageId":"503","endLine":3,"endColumn":16},{"ruleId":"500","severity":1,"message":"526","line":5,"column":8,"nodeType":"502","messageId":"503","endLine":5,"endColumn":13},{"ruleId":"500","severity":1,"message":"537","line":6,"column":8,"nodeType":"502","messageId":"503","endLine":6,"endColumn":12},{"ruleId":"500","severity":1,"message":"538","line":32,"column":13,"nodeType":"502","messageId":"503","endLine":32,"endColumn":16},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"539","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":26},{"ruleId":"500","severity":1,"message":"540","line":3,"column":13,"nodeType":"502","messageId":"503","endLine":3,"endColumn":16},{"ruleId":"500","severity":1,"message":"527","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"510","line":2,"column":10,"nodeType":"502","messageId":"503","endLine":2,"endColumn":18},{"ruleId":"500","severity":1,"message":"541","line":3,"column":10,"nodeType":"502","messageId":"503","endLine":3,"endColumn":14},{"ruleId":"500","severity":1,"message":"542","line":1,"column":10,"nodeType":"502","messageId":"503","endLine":1,"endColumn":19},{"ruleId":"543","severity":1,"message":"544","line":38,"column":42,"nodeType":"545","messageId":"546","endLine":38,"endColumn":44},{"ruleId":"543","severity":1,"message":"544","line":57,"column":34,"nodeType":"545","messageId":"546","endLine":57,"endColumn":36},{"ruleId":"500","severity":1,"message":"547","line":266,"column":9,"nodeType":"502","messageId":"503","endLine":266,"endColumn":17},{"ruleId":"548","severity":1,"message":"549","line":293,"column":37,"nodeType":"550","messageId":"551","endLine":293,"endColumn":39},{"ruleId":"500","severity":1,"message":"552","line":370,"column":53,"nodeType":"502","messageId":"503","endLine":370,"endColumn":54},{"ruleId":"500","severity":1,"message":"553","line":15,"column":10,"nodeType":"502","messageId":"503","endLine":15,"endColumn":17},{"ruleId":"519","severity":1,"message":"520","line":35,"column":5,"nodeType":"521","messageId":"522","endLine":44,"endColumn":6},{"ruleId":"500","severity":1,"message":"523","line":70,"column":11,"nodeType":"502","messageId":"503","endLine":70,"endColumn":21},{"ruleId":"500","severity":1,"message":"524","line":74,"column":11,"nodeType":"502","messageId":"503","endLine":74,"endColumn":21},{"ruleId":"500","severity":1,"message":"525","line":78,"column":11,"nodeType":"502","messageId":"503","endLine":78,"endColumn":22},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"511","line":2,"column":20,"nodeType":"502","messageId":"503","endLine":2,"endColumn":25},{"ruleId":"500","severity":1,"message":"526","line":5,"column":8,"nodeType":"502","messageId":"503","endLine":5,"endColumn":13},{"ruleId":"500","severity":1,"message":"527","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"513","severity":1,"message":"554","line":11,"column":13,"nodeType":"508","endLine":11,"endColumn":37},{"ruleId":"500","severity":1,"message":"555","line":3,"column":10,"nodeType":"502","messageId":"503","endLine":3,"endColumn":14},{"ruleId":"500","severity":1,"message":"501","line":4,"column":8,"nodeType":"502","messageId":"503","endLine":4,"endColumn":14},{"ruleId":"500","severity":1,"message":"556","line":5,"column":8,"nodeType":"502","messageId":"503","endLine":5,"endColumn":21},{"ruleId":"500","severity":1,"message":"557","line":9,"column":8,"nodeType":"502","messageId":"503","endLine":9,"endColumn":20},{"ruleId":"519","severity":1,"message":"520","line":34,"column":5,"nodeType":"521","messageId":"522","endLine":41,"endColumn":6},{"ruleId":"500","severity":1,"message":"523","line":53,"column":11,"nodeType":"502","messageId":"503","endLine":53,"endColumn":21},{"ruleId":"500","severity":1,"message":"524","line":57,"column":11,"nodeType":"502","messageId":"503","endLine":57,"endColumn":21},{"ruleId":"500","severity":1,"message":"525","line":61,"column":11,"nodeType":"502","messageId":"503","endLine":61,"endColumn":22},{"ruleId":"500","severity":1,"message":"527","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"519","severity":1,"message":"520","line":35,"column":5,"nodeType":"521","messageId":"522","endLine":46,"endColumn":6},{"ruleId":"500","severity":1,"message":"523","line":77,"column":11,"nodeType":"502","messageId":"503","endLine":77,"endColumn":21},{"ruleId":"500","severity":1,"message":"524","line":81,"column":11,"nodeType":"502","messageId":"503","endLine":81,"endColumn":21},{"ruleId":"500","severity":1,"message":"525","line":85,"column":11,"nodeType":"502","messageId":"503","endLine":85,"endColumn":22},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"511","line":2,"column":20,"nodeType":"502","messageId":"503","endLine":2,"endColumn":25},{"ruleId":"500","severity":1,"message":"526","line":5,"column":8,"nodeType":"502","messageId":"503","endLine":5,"endColumn":13},{"ruleId":"500","severity":1,"message":"526","line":7,"column":8,"nodeType":"502","messageId":"503","endLine":7,"endColumn":13},{"ruleId":"500","severity":1,"message":"527","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"558","line":12,"column":10,"nodeType":"502","messageId":"503","endLine":12,"endColumn":20},{"ruleId":"500","severity":1,"message":"559","line":12,"column":21,"nodeType":"502","messageId":"503","endLine":12,"endColumn":34},{"ruleId":"500","severity":1,"message":"560","line":13,"column":10,"nodeType":"502","messageId":"503","endLine":13,"endColumn":15},{"ruleId":"500","severity":1,"message":"561","line":13,"column":16,"nodeType":"502","messageId":"503","endLine":13,"endColumn":24},{"ruleId":"500","severity":1,"message":"562","line":14,"column":10,"nodeType":"502","messageId":"503","endLine":14,"endColumn":20},{"ruleId":"500","severity":1,"message":"563","line":14,"column":21,"nodeType":"502","messageId":"503","endLine":14,"endColumn":33},{"ruleId":"500","severity":1,"message":"564","line":15,"column":10,"nodeType":"502","messageId":"503","endLine":15,"endColumn":26},{"ruleId":"500","severity":1,"message":"565","line":15,"column":27,"nodeType":"502","messageId":"503","endLine":15,"endColumn":47},{"ruleId":"500","severity":1,"message":"566","line":7,"column":8,"nodeType":"502","messageId":"503","endLine":7,"endColumn":18},{"ruleId":"500","severity":1,"message":"541","line":8,"column":10,"nodeType":"502","messageId":"503","endLine":8,"endColumn":14},{"ruleId":"548","severity":1,"message":"549","line":108,"column":23,"nodeType":"550","messageId":"551","endLine":108,"endColumn":25},{"ruleId":"500","severity":1,"message":"511","line":2,"column":21,"nodeType":"502","messageId":"503","endLine":2,"endColumn":26},{"ruleId":"519","severity":1,"message":"520","line":33,"column":5,"nodeType":"521","messageId":"522","endLine":40,"endColumn":6},{"ruleId":"500","severity":1,"message":"523","line":52,"column":11,"nodeType":"502","messageId":"503","endLine":52,"endColumn":21},{"ruleId":"500","severity":1,"message":"524","line":56,"column":11,"nodeType":"502","messageId":"503","endLine":56,"endColumn":21},{"ruleId":"500","severity":1,"message":"525","line":60,"column":11,"nodeType":"502","messageId":"503","endLine":60,"endColumn":22},{"ruleId":"500","severity":1,"message":"527","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"567","line":6,"column":8,"nodeType":"502","messageId":"503","endLine":6,"endColumn":12},{"ruleId":"519","severity":1,"message":"520","line":36,"column":5,"nodeType":"521","messageId":"522","endLine":47,"endColumn":6},{"ruleId":"500","severity":1,"message":"523","line":68,"column":11,"nodeType":"502","messageId":"503","endLine":68,"endColumn":21},{"ruleId":"500","severity":1,"message":"524","line":72,"column":11,"nodeType":"502","messageId":"503","endLine":72,"endColumn":21},{"ruleId":"500","severity":1,"message":"525","line":76,"column":11,"nodeType":"502","messageId":"503","endLine":76,"endColumn":22},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"511","line":2,"column":20,"nodeType":"502","messageId":"503","endLine":2,"endColumn":25},{"ruleId":"500","severity":1,"message":"526","line":5,"column":8,"nodeType":"502","messageId":"503","endLine":5,"endColumn":13},{"ruleId":"500","severity":1,"message":"527","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"519","severity":1,"message":"520","line":36,"column":5,"nodeType":"521","messageId":"522","endLine":47,"endColumn":6},{"ruleId":"500","severity":1,"message":"523","line":69,"column":11,"nodeType":"502","messageId":"503","endLine":69,"endColumn":21},{"ruleId":"500","severity":1,"message":"524","line":73,"column":11,"nodeType":"502","messageId":"503","endLine":73,"endColumn":21},{"ruleId":"500","severity":1,"message":"525","line":77,"column":11,"nodeType":"502","messageId":"503","endLine":77,"endColumn":22},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"511","line":2,"column":20,"nodeType":"502","messageId":"503","endLine":2,"endColumn":25},{"ruleId":"500","severity":1,"message":"526","line":5,"column":8,"nodeType":"502","messageId":"503","endLine":5,"endColumn":13},{"ruleId":"500","severity":1,"message":"510","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"527","line":1,"column":17,"nodeType":"502","messageId":"503","endLine":1,"endColumn":25},{"ruleId":"500","severity":1,"message":"510","line":4,"column":10,"nodeType":"502","messageId":"503","endLine":4,"endColumn":18},{"ruleId":"500","severity":1,"message":"568","line":6,"column":8,"nodeType":"502","messageId":"503","endLine":6,"endColumn":16},{"ruleId":"500","severity":1,"message":"569","line":3,"column":9,"nodeType":"502","messageId":"503","endLine":3,"endColumn":18},{"ruleId":"500","severity":1,"message":"542","line":1,"column":10,"nodeType":"502","messageId":"503","endLine":1,"endColumn":19},{"ruleId":"543","severity":1,"message":"544","line":40,"column":42,"nodeType":"545","messageId":"546","endLine":40,"endColumn":44},{"ruleId":"543","severity":1,"message":"544","line":59,"column":34,"nodeType":"545","messageId":"546","endLine":59,"endColumn":36},{"ruleId":"500","severity":1,"message":"547","line":252,"column":9,"nodeType":"502","messageId":"503","endLine":252,"endColumn":17},{"ruleId":"548","severity":1,"message":"549","line":278,"column":37,"nodeType":"550","messageId":"551","endLine":278,"endColumn":39},{"ruleId":"500","severity":1,"message":"552","line":367,"column":53,"nodeType":"502","messageId":"503","endLine":367,"endColumn":54},{"ruleId":"500","severity":1,"message":"553","line":15,"column":10,"nodeType":"502","messageId":"503","endLine":15,"endColumn":17},{"ruleId":"500","severity":1,"message":"570","line":35,"column":15,"nodeType":"502","messageId":"503","endLine":35,"endColumn":24},{"ruleId":"500","severity":1,"message":"511","line":2,"column":21,"nodeType":"502","messageId":"503","endLine":2,"endColumn":26},{"ruleId":"500","severity":1,"message":"571","line":3,"column":9,"nodeType":"502","messageId":"503","endLine":3,"endColumn":17},{"ruleId":"500","severity":1,"message":"555","line":3,"column":10,"nodeType":"502","messageId":"503","endLine":3,"endColumn":14},{"ruleId":"500","severity":1,"message":"572","line":12,"column":10,"nodeType":"502","messageId":"503","endLine":12,"endColumn":15},{"ruleId":"500","severity":1,"message":"573","line":12,"column":17,"nodeType":"502","messageId":"503","endLine":12,"endColumn":25},"no-native-reassign",["574"],"no-negated-in-lhs",["575"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'pink' is defined but never used.","'classes' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Fragment' is defined but never used.","'Field' is defined but never used.","'SearchLab' is defined but never used.","react/jsx-pascal-case","Imported JSX component Lab_Sign must be in PascalCase or SCREAMING_SNAKE_CASE","'navbar_select' is defined but never used.","'onChangeTickets' is assigned a value but never used.",["574"],["575"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'handleNext' is assigned a value but never used.","'handleBack' is assigned a value but never used.","'handleReset' is assigned a value but never used.","'axios' is defined but never used.","'useState' is defined but never used.","no-self-assign","'start_time' is assigned to itself.","selfAssignment","'end_time' is assigned to itself.","'useFormik' is defined but never used.","'FieldArray' is defined but never used.","'Formik' is defined but never used.","'Form' is defined but never used.","'yup' is defined but never used.","'Appp' is defined but never used.","'dic' is assigned a value but never used.","'useEffect' is defined but never used.","'Yup' is defined but never used.","'date' is defined but never used.","'Container' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'api_data' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'c' is assigned a value but never used.","'message' is assigned a value but never used.","Imported JSX component Hospital_appointments must be in PascalCase or SCREAMING_SNAKE_CASE","'Link' is defined but never used.","'ReviewAlready' is defined but never used.","'SearchDoctor' is defined but never used.","'changepage' is assigned a value but never used.","'setchangepage' is assigned a value but never used.","'index' is assigned a value but never used.","'setindex' is assigned a value but never used.","'doctor_key' is assigned a value but never used.","'setdoctorkey' is assigned a value but never used.","'max_appointments' is assigned a value but never used.","'set_max_appointments' is assigned a value but never used.","'SignupForm' is defined but never used.","'Home' is defined but never used.","'ShowLabs' is defined but never used.","'useParams' is defined but never used.","'real_data' is assigned a value but never used.","'Redirect' is defined but never used.","'check' is assigned a value but never used.","'setcheck' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]